"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const storage = __importStar(require("./storage"));
const memory = __importStar(require("./memory"));
const stack = __importStar(require("./stack"));
const constant = __importStar(require("./constant"));
const Pointer = __importStar(require("../types/pointer"));
function* read(pointer, state) {
    if (Pointer.isStackPointer(pointer) && state.stack) {
        return stack.readStack(state.stack, pointer.stack.from, pointer.stack.to);
    }
    else if (Pointer.isStoragePointer(pointer) && state.storage) {
        return yield* storage.readRange(state.storage, pointer.storage);
    }
    else if (Pointer.isMemoryPointer(pointer) && state.memory) {
        return memory.readBytes(state.memory, pointer.memory.start, pointer.memory.length);
    }
    else if (Pointer.isCalldataPointer(pointer) && state.calldata) {
        return memory.readBytes(state.calldata, pointer.calldata.start, pointer.calldata.length);
        //there is no need for a separate calldata read function; the existing memory read function
        //will do fine
    }
    else if (Pointer.isStackLiteralPointer(pointer)) {
        return pointer.literal;
    }
    else if (Pointer.isConstantDefinitionPointer(pointer)) {
        return constant.readDefinition(pointer.definition);
    }
    else if (Pointer.isSpecialPointer(pointer)) {
        return state.specials[pointer.special];
    }
}
exports.default = read;
//# sourceMappingURL=index.js.map