"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("decoder:decode:value");
const read_1 = __importDefault(require("../read"));
const DecodeUtils = __importStar(require("truffle-decode-utils"));
function* decodeValue(definition, pointer, info) {
    //NOTE: this does not actually return a Uint8Aarray, but due to the use of yield* read,
    //we have to include it in the type :-/
    const { state } = info;
    let bytes = yield* read_1.default(pointer, state);
    if (bytes == undefined) {
        debug("segfault, pointer %o, state: %O", pointer, state);
        return undefined;
    }
    debug("definition %O", definition);
    debug("pointer %o", pointer);
    switch (DecodeUtils.Definition.typeClass(definition)) {
        case "bool":
            return !DecodeUtils.Conversion.toBN(bytes).isZero();
        case "uint":
            return DecodeUtils.Conversion.toBN(bytes);
        case "int":
            return DecodeUtils.Conversion.toSignedBN(bytes);
        case "address":
            return DecodeUtils.Conversion.toAddress(bytes);
        case "contract":
            return yield* decodeContract(bytes, info);
        case "bytes":
            debug("typeIdentifier %s %o", DecodeUtils.Definition.typeIdentifier(definition), bytes);
            //if there's a static size, we want to truncate to that length
            let length = DecodeUtils.Definition.specifiedSize(definition);
            if (length !== null) {
                bytes = bytes.slice(0, length);
            }
            //we don't need to pass in length here, since that's for *adding* padding
            return DecodeUtils.Conversion.toHexString(bytes);
        case "string":
            debug("typeIdentifier %s %o", DecodeUtils.Definition.typeIdentifier(definition), bytes);
            if (typeof bytes == "string") {
                return bytes;
            }
            return String.fromCharCode.apply(undefined, bytes);
        case "enum":
            const numRepresentation = DecodeUtils.Conversion.toBN(bytes).toNumber();
            debug("numRepresentation %d", numRepresentation);
            const referenceId = definition.referencedDeclaration || (definition.typeName ? definition.typeName.referencedDeclaration : undefined);
            const enumDeclaration = info.referenceDeclarations[referenceId];
            const decodedValue = enumDeclaration.members[numRepresentation].name;
            return {
                type: enumDeclaration.name,
                value: enumDeclaration.name + "." + decodedValue
            };
        case "function":
            switch (DecodeUtils.Definition.visibility(definition)) {
                case "external":
                    let address = bytes.slice(0, DecodeUtils.EVM.ADDRESS_SIZE);
                    let selector = bytes.slice(DecodeUtils.EVM.ADDRESS_SIZE, DecodeUtils.EVM.ADDRESS_SIZE + DecodeUtils.EVM.SELECTOR_SIZE);
                    return yield* decodeExternalFunction(address, selector, info);
                case "internal":
                    let pc;
                    if (info.currentContext.isConstructor) {
                        //get 2nd-to-last 4 bytes
                        pc = bytes.slice(-DecodeUtils.EVM.PC_SIZE * 2, -DecodeUtils.EVM.PC_SIZE);
                    }
                    else {
                        //get last 4 bytes
                        pc = bytes.slice(-DecodeUtils.EVM.PC_SIZE);
                    }
                    return decodeInternalFunction(pc, info);
                default:
                    debug("unknown visibility: %s", DecodeUtils.Definition.visibility(definition));
            }
        default:
            debug("Unknown value type: %s", DecodeUtils.Definition.typeIdentifier(definition));
            return undefined;
    }
}
exports.default = decodeValue;
function* decodeContract(addressBytes, info) {
    let address = DecodeUtils.Conversion.toAddress(addressBytes);
    let codeBytes = yield {
        type: "code",
        address
    };
    let code = DecodeUtils.Conversion.toHexString(codeBytes);
    let context = DecodeUtils.Contexts.findDecoderContext(info.contexts, code);
    if (context !== null && context.contractName !== undefined) {
        return context.contractName + "(" + address + ")";
    }
    else {
        return address;
    }
}
exports.decodeContract = decodeContract;
//note: address can have extra zeroes on the left like elsewhere, but selector should be exactly 4 bytes
function* decodeExternalFunction(addressBytes, selectorBytes, info) {
    //note: yes, this shares a fair amount of code with decodeContract.
    //I'm going to factor this in a later PR; I'm deliberately not doing that
    //for now, though.
    let address = DecodeUtils.Conversion.toAddress(addressBytes);
    let selector = DecodeUtils.Conversion.toHexString(selectorBytes);
    let codeBytes = yield {
        type: "code",
        address
    };
    let code = DecodeUtils.Conversion.toHexString(codeBytes);
    let context = DecodeUtils.Contexts.findDecoderContext(info.contexts, code);
    if (context === null || context.contractName === undefined) {
        //note: I'm assuming it never occurs that we have the ABI but not the
        //contract name
        return `${address}.call(${selector}...)`;
    }
    let abiEntry = context.abi !== undefined
        ? context.abi[selector]
        : undefined;
    if (abiEntry === undefined) {
        return `${context.contractName}(${address}).call(${selector}...)`;
    }
    let functionName = abiEntry.name;
    return `${context.contractName}(${address}).${functionName}`;
}
exports.decodeExternalFunction = decodeExternalFunction;
function decodeInternalFunction(pcBytes, info) {
    let pc = DecodeUtils.Conversion.toBN(pcBytes).toNumber();
    //before anything else: do we even have an internal functions table?
    //if not, this is being (presumably) used from the contract decoder, and we don't
    //support decoding internal functions there
    if (!info.internalFunctionsTable) {
        return "<decoding not supported>";
    }
    //also before we continue: is the PC zero? if so let's just return that
    if (pc === 0) {
        return "<zero>";
    }
    //otherwise, we get our function
    let functionEntry = info.internalFunctionsTable[pc];
    if (!functionEntry) {
        //if it's not zero and there's no entry... we give up :P
        return undefined;
    }
    if (functionEntry.isDesignatedInvalid) {
        return "assert(false)";
    }
    return functionEntry.contractName + "." + functionEntry.name;
}
exports.decodeInternalFunction = decodeInternalFunction;
//# sourceMappingURL=value.js.map