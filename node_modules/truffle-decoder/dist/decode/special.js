"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("decoder:decode:special");
const DecodeUtils = __importStar(require("truffle-decode-utils"));
const value_1 = __importDefault(require("./value"));
function* decodeSpecial(definition, pointer, info) {
    if (DecodeUtils.Definition.typeClass(definition) === "magic") { //that's right, magic!
        return yield* decodeMagic(definition, pointer, info);
    }
    else {
        return yield* value_1.default(definition, pointer, info);
    }
}
exports.default = decodeSpecial;
function* decodeMagic(definition, pointer, info) {
    let { state } = info;
    switch (pointer.special) {
        case "msg":
            return {
                data: yield* value_1.default(DecodeUtils.Definition.MSG_DATA_DEFINITION, { calldata: {
                        start: 0,
                        length: state.calldata.length
                    } }, info),
                sig: yield* value_1.default(DecodeUtils.Definition.MSG_SIG_DEFINITION, { calldata: {
                        start: 0,
                        length: DecodeUtils.EVM.SELECTOR_SIZE,
                    } }, info),
                sender: yield* value_1.default(DecodeUtils.Definition.spoofAddressPayableDefinition("sender"), { special: "sender" }, info),
                value: yield* value_1.default(DecodeUtils.Definition.spoofUintDefinition("value"), { special: "value" }, info)
            };
        case "tx":
            return {
                origin: yield* value_1.default(DecodeUtils.Definition.spoofAddressPayableDefinition("origin"), { special: "origin" }, info),
                gasprice: yield* value_1.default(DecodeUtils.Definition.spoofUintDefinition("gasprice"), { special: "gasprice" }, info)
            };
        case "block":
            let block = {
                coinbase: yield* value_1.default(DecodeUtils.Definition.spoofAddressPayableDefinition("coinbase"), { special: "coinbase" }, info)
            };
            //the other ones are all uint's, so let's handle them all at once; due to
            //the lack of generator arrow functions, we do it by mutating block
            const variables = ["difficulty", "gaslimit", "number", "timestamp"];
            for (let variable of variables) {
                block[variable] = yield* value_1.default(DecodeUtils.Definition.spoofUintDefinition(variable), { special: variable }, info);
            }
            return block;
        default:
            debug("Unrecognized magic variable!");
    }
}
exports.decodeMagic = decodeMagic;
//# sourceMappingURL=special.js.map