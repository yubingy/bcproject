(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Debugger", [], factory);
	else if(typeof exports === 'object')
		exports["Debugger"] = factory();
	else
		root["Debugger"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 37);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("debug");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(2);

var _extends3 = _interopRequireDefault(_extends2);

exports.isDeliberatelySkippedNodeType = isDeliberatelySkippedNodeType;
exports.isSkippedNodeType = isSkippedNodeType;
exports.prefixName = prefixName;
exports.extractPrimarySource = extractPrimarySource;
exports.keccak256 = keccak256;
exports.stableKeccak256 = stableKeccak256;
exports.makeAssignment = makeAssignment;
exports.isCallMnemonic = isCallMnemonic;
exports.isShortCallMnemonic = isShortCallMnemonic;
exports.isDelegateCallMnemonicBroad = isDelegateCallMnemonicBroad;
exports.isDelegateCallMnemonicStrict = isDelegateCallMnemonicStrict;
exports.isStaticCallMnemonic = isStaticCallMnemonic;
exports.isCreateMnemonic = isCreateMnemonic;
exports.isNormalHaltingMnemonic = isNormalHaltingMnemonic;

var _truffleDecodeUtils = __webpack_require__(4);

var utils = _interopRequireWildcard(_truffleDecodeUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const stringify = __webpack_require__(47);

/** AST node types that are skipped by stepNext() to filter out some noise */
function isDeliberatelySkippedNodeType(node) {
  const skippedTypes = ["ContractDefinition", "VariableDeclaration"];
  return skippedTypes.includes(node.nodeType);
}

//HACK
//these aren't the only types of skipped nodes, but determining all skipped
//nodes would be too difficult
function isSkippedNodeType(node) {
  const otherSkippedTypes = ["VariableDeclarationStatement", "Mapping"];
  return isDeliberatelySkippedNodeType(node) || otherSkippedTypes.includes(node.nodeType) || node.nodeType.includes("TypeName") || //HACK
  //skip string literals too -- we'll handle that manually
  node.typeDescriptions !== undefined && //seems this sometimes happens?
  utils.Definition.typeClass(node) === "stringliteral";
}

function prefixName(prefix, fn) {
  Object.defineProperty(fn, "name", {
    value: `${prefix}.${fn.name}`,
    configurable: true
  });

  return fn;
}

/*
 * extract the primary source from a source map
 * (i.e., the source for the first instruction, found
 * between the second and third colons)
 * (this is something of a HACK)
 */
function extractPrimarySource(sourceMap) {
  return parseInt(sourceMap.match(/^[^:]+:[^:]+:([^:]+):/)[1]);
}

/**
 * @return 0x-prefix string of keccak256 hash
 */
function keccak256(...args) {
  return utils.Conversion.toHexString(utils.EVM.keccak256(...args));
}

/**
 * Given an object, return a stable hash by first running it through a stable
 * stringify operation before hashing
 */
function stableKeccak256(obj) {
  return keccak256({ type: "string", value: stringify(obj) });
}

/*
 * used by data; takes an id object and a ref (pointer) and returns a full
 * corresponding assignment object
 */
function makeAssignment(idObj, ref) {
  let id = stableKeccak256(idObj);
  return (0, _extends3.default)({}, idObj, { id, ref });
}

/*
 * Given a mmemonic, determine whether it's the mnemonic of a calling
 * instruction (does NOT include creation instructions)
 */
function isCallMnemonic(op) {
  const calls = ["CALL", "DELEGATECALL", "STATICCALL", "CALLCODE"];
  return calls.includes(op);
}

/*
 * returns true for mnemonics for calls that take only 6 args instead of 7
 */
function isShortCallMnemonic(op) {
  const shortCalls = ["DELEGATECALL", "STATICCALL"];
  return shortCalls.includes(op);
}

/*
 * returns true for mnemonics for calls that delegate storage
 */
function isDelegateCallMnemonicBroad(op) {
  const delegateCalls = ["DELEGATECALL", "CALLCODE"];
  return delegateCalls.includes(op);
}

/*
 * returns true for mnemonics for calls that delegate everything
 */
function isDelegateCallMnemonicStrict(op) {
  const delegateCalls = ["DELEGATECALL"];
  return delegateCalls.includes(op);
}

/*
 * returns true for mnemonics for static calls
 */
function isStaticCallMnemonic(op) {
  const delegateCalls = ["STATICCALL"];
  return delegateCalls.includes(op);
}

/*
 * Given a mmemonic, determine whether it's the mnemonic of a creation
 * instruction
 */
function isCreateMnemonic(op) {
  const creates = ["CREATE", "CREATE2"];
  return creates.includes(op);
}

/*
 * Given a mmemonic, determine whether it's the mnemonic of a normal
 * halting instruction
 */
function isNormalHaltingMnemonic(op) {
  const halts = ["STOP", "RETURN", "SELFDESTRUCT", "SUICIDE"];
  //the mnemonic SUICIDE is no longer used, but just in case, I'm including it
  return halts.includes(op);
}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/extends");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("reselect-tree");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("truffle-decode-utils");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("redux-saga/effects");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/entries");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/assign");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(6);

var _entries2 = _interopRequireDefault(_entries);

var _extends2 = __webpack_require__(2);

var _extends3 = _interopRequireDefault(_extends2);

var _assign = __webpack_require__(8);

var _assign2 = _interopRequireDefault(_assign);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(3);

var _bn = __webpack_require__(15);

var _bn2 = _interopRequireDefault(_bn);

var _selectors = __webpack_require__(10);

var _selectors2 = _interopRequireDefault(_selectors);

var _truffleDecodeUtils = __webpack_require__(4);

var DecodeUtils = _interopRequireWildcard(_truffleDecodeUtils);

var _helpers = __webpack_require__(1);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:evm:selectors"); // eslint-disable-line no-unused-vars

/**
 * create EVM-level selectors for a given trace step selector
 * may specify additional selectors to include
 */
function createStepSelectors(step, state = null) {
  let base = {
    /**
     * .trace
     *
     * trace step info related to operation
     */
    trace: (0, _reselectTree.createLeaf)([step], step => {
      if (!step) {
        return null;
      }
      let { gasCost, op, pc } = step;
      return { gasCost, op, pc };
    }),

    /**
     * .programCounter
     */
    programCounter: (0, _reselectTree.createLeaf)(["./trace"], step => step ? step.pc : null),

    /**
     * .isJump
     */
    isJump: (0, _reselectTree.createLeaf)(["./trace"], step => step.op != "JUMPDEST" && step.op.indexOf("JUMP") == 0),

    /**
     * .isCall
     *
     * whether the opcode will switch to another calling context
     */
    isCall: (0, _reselectTree.createLeaf)(["./trace"], step => (0, _helpers.isCallMnemonic)(step.op)),

    /**
     * .isShortCall
     *
     * for calls that only take 6 arguments instead of 7
     */
    isShortCall: (0, _reselectTree.createLeaf)(["./trace"], step => (0, _helpers.isShortCallMnemonic)(step.op)),

    /**
     * .isDelegateCallBroad
     *
     * for calls that delegate storage
     */
    isDelegateCallBroad: (0, _reselectTree.createLeaf)(["./trace"], step => (0, _helpers.isDelegateCallMnemonicBroad)(step.op)),

    /**
     * .isDelegateCallStrict
     *
     * for calls that additionally delegate sender and value
     */
    isDelegateCallStrict: (0, _reselectTree.createLeaf)(["./trace"], step => (0, _helpers.isDelegateCallMnemonicStrict)(step.op)),

    /**
     * .isStaticCall
     */
    isStaticCall: (0, _reselectTree.createLeaf)(["./trace"], step => (0, _helpers.isStaticCallMnemonic)(step.op)),

    /**
     * .isCreate
     */
    isCreate: (0, _reselectTree.createLeaf)(["./trace"], step => (0, _helpers.isCreateMnemonic)(step.op)),

    /**
     * .isHalting
     *
     * whether the instruction halts or returns from a calling context
     * NOTE: this covers only ordinary halts, not exceptional halts;
     * but it doesn't check the return status, so any normal halting
     * instruction will qualify here
     */
    isHalting: (0, _reselectTree.createLeaf)(["./trace"], step => (0, _helpers.isNormalHaltingMnemonic)(step.op)),

    /*
     * .isStore
     */
    isStore: (0, _reselectTree.createLeaf)(["./trace"], step => step.op == "SSTORE"),

    /*
     * .isLoad
     */
    isLoad: (0, _reselectTree.createLeaf)(["./trace"], step => step.op == "SLOAD"),

    /*
     * .touchesStorage
     *
     * whether the instruction involves storage
     */
    touchesStorage: (0, _reselectTree.createLeaf)(["./isStore", "isLoad"], (stores, loads) => stores || loads)
  };

  if (state) {
    const isRelative = path => typeof path == "string" && (path.startsWith("./") || path.startsWith("../"));

    if (isRelative(state)) {
      state = `../${state}`;
    }

    (0, _assign2.default)(base, {
      /**
       * .callAddress
       *
       * address transferred to by call operation
       */
      callAddress: (0, _reselectTree.createLeaf)(["./isCall", state], (isCall, { stack }) => {
        if (!isCall) {
          return null;
        }

        let address = stack[stack.length - 2];
        return DecodeUtils.Conversion.toAddress(address);
      }),

      /**
       * .createBinary
       *
       * binary code to execute via create operation
       */
      createBinary: (0, _reselectTree.createLeaf)(["./isCreate", state], (isCreate, { stack, memory }) => {
        if (!isCreate) {
          return null;
        }

        // Get the code that's going to be created from memory.
        // Note we multiply by 2 because these offsets are in bytes.
        const offset = parseInt(stack[stack.length - 2], 16) * 2;
        const length = parseInt(stack[stack.length - 3], 16) * 2;

        return "0x" + memory.join("").substring(offset, offset + length);
      }),

      /**
       * .callData
       *
       * data passed to EVM call
       */
      callData: (0, _reselectTree.createLeaf)(["./isCall", "./isShortCall", state], (isCall, short, { stack, memory }) => {
        if (!isCall) {
          return null;
        }

        //if it's 6-argument call, the data start and offset will be one spot
        //higher in the stack than they would be for a 7-argument call, so
        //let's introduce an offset to handle this
        let argOffset = short ? 1 : 0;

        // Get the data from memory.
        // Note we multiply by 2 because these offsets are in bytes.
        const offset = parseInt(stack[stack.length - 4 + argOffset], 16) * 2;
        const length = parseInt(stack[stack.length - 5 + argOffset], 16) * 2;

        return "0x" + memory.join("").substring(offset, offset + length);
      }),

      /**
       * .callValue
       *
       * value for the call (not create); returns null for DELEGATECALL
       */
      callValue: (0, _reselectTree.createLeaf)(["./isCall", "./isDelegateCallStrict", "./isStaticCall", state], (calls, delegates, isStatic, { stack }) => {
        if (!calls || delegates) {
          return null;
        }

        if (isStatic) {
          return new _bn2.default(0);
        }

        //otherwise, for CALL and CALLCODE, it's the 3rd argument
        let value = stack[stack.length - 3];
        return DecodeUtils.Conversion.toBN(value);
      }),

      /**
       * .createValue
       *
       * value for the create
       */
      createValue: (0, _reselectTree.createLeaf)(["./isCreate", state], (isCreate, { stack }) => {
        if (!isCreate) {
          return null;
        }

        //creates have the value as the first argument
        let value = stack[stack.length - 1];
        return DecodeUtils.Conversion.toBN(value);
      }),

      /**
       * .storageAffected
       *
       * storage slot being stored to or loaded from
       * we do NOT prepend "0x"
       */
      storageAffected: (0, _reselectTree.createLeaf)(["./touchesStorage", state], (touchesStorage, { stack }) => {
        if (!touchesStorage) {
          return null;
        }

        return stack[stack.length - 1];
      }),

      /*
       * .returnValue
       *
       * for a RETURN instruction, the value returned
       * we DO prepend "0x"
       * (will also return "0x" for STOP or SELFDESTRUCT but
       * null otherwise)
       */
      returnValue: (0, _reselectTree.createLeaf)(["./trace", "./isHalting", state], (step, isHalting, { stack, memory }) => {
        if (!isHalting) {
          return null;
        }
        if (step.op !== "RETURN") {
          //STOP and SELFDESTRUCT return empty value
          return "0x";
        }
        // Get the data from memory.
        // Note we multiply by 2 because these offsets are in bytes.
        const offset = parseInt(stack[stack.length - 1], 16) * 2;
        const length = parseInt(stack[stack.length - 2], 16) * 2;

        return "0x" + memory.join("").substring(offset, offset + length);
      })
    });
  }

  return base;
}

const evm = (0, _reselectTree.createSelectorTree)({
  /**
   * evm.state
   */
  state: state => state.evm,

  /**
   * evm.info
   */
  info: {
    /**
     * evm.info.contexts
     */
    contexts: (0, _reselectTree.createLeaf)(["/state"], state => state.info.contexts.byContext),

    /**
     * evm.info.binaries
     */
    binaries: {
      /**
       * evm.info.binaries.search
       *
       * returns function (binary) => context (returns the *ID* of the context)
       * (returns null on no match)
       */
      search: (0, _reselectTree.createLeaf)(["/info/contexts"], contexts => binary => DecodeUtils.Contexts.findDebuggerContext(contexts, binary))
    }
  },

  /**
   * evm.transaction
   */
  transaction: {
    /*
     * evm.transaction.globals
     */
    globals: {
      /*
       * evm.transaction.globals.tx
       */
      tx: (0, _reselectTree.createLeaf)(["/state"], state => state.transaction.globals.tx),
      /*
       * evm.transaction.globals.block
       */
      block: (0, _reselectTree.createLeaf)(["/state"], state => state.transaction.globals.block)
    },

    /*
     * evm.transaction.status
     */
    status: (0, _reselectTree.createLeaf)(["/state"], state => state.transaction.status),

    /*
     * evm.transaction.initialCall
     */
    initialCall: (0, _reselectTree.createLeaf)(["/state"], state => state.transaction.initialCall)
  },

  /**
   * evm.current
   */
  current: {
    /**
     * evm.current.callstack
     */
    callstack: state => state.evm.proc.callstack,

    /**
     * evm.current.call
     */
    call: (0, _reselectTree.createLeaf)(["./callstack"], stack => stack.length ? stack[stack.length - 1] : {}),

    /**
     * evm.current.context
     */
    context: (0, _reselectTree.createLeaf)(["./call", "./codex/instances", "/info/binaries/search", "/info/contexts"], ({ address, binary }, instances, search, contexts) => {
      let contextId;
      if (address) {
        //if we're in a call to a deployed contract, we must have recorded
        //the context in the codex, so we don't need to do any further
        //searching
        ({ context: contextId, binary } = instances[address]);
      } else if (binary) {
        //otherwise, if we're in a constructor, we'll need to actually do a
        //search
        contextId = search(binary);
      } else {
        //exceptional case: no transaction is loaded
        return null;
      }

      if (contextId != undefined) {
        //if we found the context, use it
        let context = contexts[contextId];
        return (0, _extends3.default)({}, context, {
          binary
        });
      } else {
        //otherwise we'll construct something default
        return {
          binary,
          isConstructor: address === undefined
          //WARNING: we've mutated binary here, so
          //instead we go by whether address is undefined
        };
      }
    }),

    /**
     * evm.current.state
     *
     * evm state info: as of last operation, before op defined in step
     */
    state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => ({
      [param]: (0, _reselectTree.createLeaf)([_selectors2.default.step], step => step[param])
    }))),

    /**
     * evm.current.step
     */
    step: (0, _extends3.default)({}, createStepSelectors(_selectors2.default.step, "./state"), {

      //the following step selectors only exist for current, not next or any
      //other step

      /*
       * evm.current.step.createdAddress
       *
       * address created by the current create step
       */
      createdAddress: (0, _reselectTree.createLeaf)(["./isCreate", "/nextOfSameDepth/state/stack"], (isCreate, stack) => {
        if (!isCreate) {
          return null;
        }
        let address = stack[stack.length - 1];
        return DecodeUtils.Conversion.toAddress(address);
      }),

      /**
       * evm.current.step.callsPrecompileOrExternal
       *
       * are we calling a precompiled contract or an externally-owned account,
       * rather than a contract account that isn't precompiled?
       */
      callsPrecompileOrExternal: (0, _reselectTree.createLeaf)(["./isCall", "/current/state/depth", "/next/state/depth"], (calls, currentDepth, nextDepth) => calls && currentDepth === nextDepth),

      /**
       * evm.current.step.isContextChange
       * groups together calls, creates, halts, and exceptional halts
       */
      isContextChange: (0, _reselectTree.createLeaf)(["/current/state/depth", "/next/state/depth"], (currentDepth, nextDepth) => currentDepth !== nextDepth),

      /**
       * evm.current.step.isExceptionalHalting
       */
      isExceptionalHalting: (0, _reselectTree.createLeaf)(["./isHalting", "/current/state/depth", "/next/state/depth", "./returnStatus"], (halting, currentDepth, nextDepth, status) => halting ? !status //if deliberately halting, check the return status
      : nextDepth < currentDepth //if not on a deliberate halt, any halt
      //is an exceptional halt
      ),

      /**
       * evm.current.step.returnStatus
       * checks the return status of the *current* halting instruction (for
       * normal halts only)
       * (returns a boolean -- true for success, false for failure)
       */
      returnStatus: (0, _reselectTree.createLeaf)(["./isHalting", "/next/state", _selectors2.default.stepsRemaining, "/transaction/status"], (isHalting, { stack }, remaining, finalStatus) => {
        if (!isHalting) {
          return null; //not clear this'll do much good since this may get
          //read as false, but, oh well, may as well
        }
        if (remaining <= 1) {
          return finalStatus;
        } else {
          const ZERO_WORD = "00".repeat(DecodeUtils.EVM.WORD_SIZE);
          return stack[stack.length - 1] !== ZERO_WORD;
        }
      })
    }),

    /**
     * evm.current.codex (namespace)
     */
    codex: {
      /**
       * evm.current.codex (selector)
       * the whole codex! not that that's very much at the moment
       */
      _: (0, _reselectTree.createLeaf)(["/state"], state => state.proc.codex),

      /**
       * evm.current.codex.storage
       * the current storage, as fetched from the codex... unless we're in a
       * failed creation call, then we just fall back on the state (which will
       * work, since nothing else can interfere with the storage of a failed
       * creation call!)
       */
      storage: (0, _reselectTree.createLeaf)(["./_", "../state/storage", "../call"], (codex, rawStorage, { storageAddress }) => storageAddress === DecodeUtils.EVM.ZERO_ADDRESS ? rawStorage //HACK -- if zero address ignore the codex
      : codex[codex.length - 1].accounts[storageAddress].storage),

      /*
       * evm.current.codex.instances
       */
      instances: (0, _reselectTree.createLeaf)(["./_"], codex => (0, _assign2.default)({}, ...(0, _entries2.default)(codex[codex.length - 1].accounts).map(([address, { code, context }]) => ({
        [address]: { address, binary: code, context }
      }))))
    }
  },

  /**
   * evm.next
   */
  next: {
    /**
     * evm.next.state
     *
     * evm state as a result of next step operation
     */
    state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => ({
      [param]: (0, _reselectTree.createLeaf)([_selectors2.default.next], step => step[param])
    }))),

    /*
     * evm.next.step
     */
    step: createStepSelectors(_selectors2.default.next, "./state")
  },

  /**
   * evm.nextOfSameDepth
   */
  nextOfSameDepth: {
    /**
     * evm.nextOfSameDepth.state
     *
     * evm state at the next step of same depth
     */
    state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => ({
      [param]: (0, _reselectTree.createLeaf)([_selectors2.default.nextOfSameDepth], step => step[param])
    })))
  }
});

exports.default = evm;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reselectTree = __webpack_require__(3);

const PAST_END_OF_TRACE = {
  depth: -1, //this is the part that matters!
  //the rest of this is just to look like a trace step
  error: "",
  gas: 0,
  memory: [],
  stack: [],
  storage: {},
  gasCost: 0,
  op: "STOP",
  pc: -1 //this is not at all valid but that's fine
};

let trace = (0, _reselectTree.createSelectorTree)({
  /**
   * trace.index
   *
   * current step index
   */
  index: state => state.trace.proc.index,

  /*
   * trace.loaded
   * is a trace loaded?
   */
  loaded: (0, _reselectTree.createLeaf)(["/steps"], steps => steps !== null),

  /**
   * trace.finished
   * is the trace finished?
   */
  finished: state => state.trace.proc.finished,

  /**
   * trace.finishedOrUnloaded
   *
   * is the trace finished, including if it's unloaded?
   */
  finishedOrUnloaded: (0, _reselectTree.createLeaf)(["/finished", "/loaded"], (finished, loaded) => finished || !loaded),

  /**
   * trace.steps
   *
   * all trace steps
   */
  steps: state => state.trace.transaction.steps,

  /**
   * trace.stepsRemaining
   *
   * number of steps remaining in trace
   */
  stepsRemaining: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => steps.length - index),

  /**
   * trace.step
   *
   * current trace step
   */
  step: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => steps ? steps[index] : null //null if no tx loaded
  ),

  /**
   * trace.next
   *
   * next trace step
   * HACK: if at the end,
   * we will return a spoofed "past end" step
   */
  next: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => index < steps.length - 1 ? steps[index + 1] : PAST_END_OF_TRACE),

  /*
   * trace.nextOfSameDepth
   * next trace step that's at the same depth as this one
   * NOTE: if there is none, will return undefined
   * (should not be used in such cases)
   */
  nextOfSameDepth: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    let depth = steps[index].depth;
    return steps.slice(index + 1).find(step => step.depth === depth);
  })
});

exports.default = trace;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(6);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(8);

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = __webpack_require__(2);

var _extends3 = _interopRequireDefault(_extends2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(3);

var _truffleSolidityUtils = __webpack_require__(51);

var _truffleSolidityUtils2 = _interopRequireDefault(_truffleSolidityUtils);

var _truffleCodeUtils = __webpack_require__(52);

var _truffleCodeUtils2 = _interopRequireDefault(_truffleCodeUtils);

var _map = __webpack_require__(25);

var _jsonPointer = __webpack_require__(22);

var _jsonPointer2 = _interopRequireDefault(_jsonPointer);

var _selectors = __webpack_require__(9);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(10);

var _selectors4 = _interopRequireDefault(_selectors3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:solidity:selectors");

function getSourceRange(instruction = {}) {
  return {
    start: instruction.start || 0,
    length: instruction.length || 0,
    lines: instruction.range || {
      start: {
        line: 0,
        column: 0
      },
      end: {
        line: 0,
        column: 0
      }
    }
  };
}

//function to create selectors that need both a current and next version
function createMultistepSelectors(stepSelector) {
  return {
    /**
     * .instruction
     */
    instruction: (0, _reselectTree.createLeaf)(["/current/instructionAtProgramCounter", stepSelector.programCounter],
    //HACK: we use solidity.current.instructionAtProgramCounter
    //even if we're looking at solidity.next.
    //This is harmless... so long as the current instruction isn't a context
    //change.  So, don't use solidity.next when it is.

    (map, pc) => map[pc] || {}),

    /**
     * .source
     */
    source: (0, _reselectTree.createLeaf)(["/info/sources", "./instruction"], (sources, { file: id }) => sources[id] || {}),

    /**
     * .sourceRange
     */
    sourceRange: (0, _reselectTree.createLeaf)(["./instruction"], getSourceRange),

    /**
     * .pointer
     */
    pointer: (0, _reselectTree.createLeaf)(["./source", "./sourceRange"], ({ ast }, range) => (0, _map.findRange)(ast, range.start, range.length)),

    /**
     * .node
     */
    node: (0, _reselectTree.createLeaf)(["./source", "./pointer"], ({ ast }, pointer) => pointer ? _jsonPointer2.default.get(ast, pointer) : _jsonPointer2.default.get(ast, ""))
  };
}

let solidity = (0, _reselectTree.createSelectorTree)({
  /**
   * solidity.state
   */
  state: state => state.solidity,

  /**
   * solidity.info
   */
  info: {
    /**
     * solidity.info.sources
     */
    sources: (0, _reselectTree.createLeaf)(["/state"], state => state.info.sources.byId)
  },

  /**
   * solidity.current
   */
  current: (0, _extends3.default)({
    /**
     * solidity.current.sourceMap
     */
    sourceMap: (0, _reselectTree.createLeaf)([_selectors2.default.current.context], context => context ? context.sourceMap : null //null when no tx loaded
    ),

    /**
     * solidity.current.functionDepthStack
     */
    functionDepthStack: state => state.solidity.proc.functionDepthStack,

    /**
     * solidity.current.functionDepth
     */
    functionDepth: (0, _reselectTree.createLeaf)(["./functionDepthStack"], stack => stack[stack.length - 1]),

    /**
     * solidity.current.instructions
     */
    instructions: (0, _reselectTree.createLeaf)(["/info/sources", _selectors2.default.current.context, "./sourceMap"], (sources, context, sourceMap) => {
      if (!context) {
        return [];
      }
      let binary = context.binary;
      if (!binary) {
        return [];
      }

      let numInstructions;
      if (sourceMap) {
        numInstructions = sourceMap.split(";").length;
      } else {
        //HACK
        numInstructions = (binary.length - 2) / 2;
        //this is actually an overestimate, but that's OK
      }

      //because we might be dealing with a constructor with arguments, we do
      //*not* remove metadata manually
      let instructions = _truffleCodeUtils2.default.parseCode(binary, numInstructions);

      if (!sourceMap) {
        // HACK
        // Let's create a source map to use since none exists. This source
        // map maps just as many ranges as there are instructions (or
        // possibly more), and marks them all as being Solidity-internal and
        // not jumps.
        sourceMap = binary !== "0x" ? "0:0:-1:-".concat(";".repeat(instructions.length - 1)) : "";
      }

      var lineAndColumnMappings = (0, _assign2.default)({}, ...(0, _entries2.default)(sources).map(([id, { source }]) => ({
        [id]: _truffleSolidityUtils2.default.getCharacterOffsetToLineAndColumnMapping(source || "")
      })));
      var humanReadableSourceMap = _truffleSolidityUtils2.default.getHumanReadableSourceMap(sourceMap);

      let primaryFile = humanReadableSourceMap[0].file;
      debug("primaryFile %o", primaryFile);

      return instructions.map((instruction, index) => {
        // lookup source map by index and add `index` property to
        // instruction
        //

        const sourceMap = humanReadableSourceMap[index] || {};

        return {
          instruction: (0, _extends3.default)({}, instruction, { index }),
          sourceMap
        };
      }).map(({ instruction, sourceMap }) => {
        // add source map information to instruction, or defaults
        //

        const {
          jump,
          start = 0,
          length = 0,
          file = primaryFile
        } = sourceMap;
        const lineAndColumnMapping = lineAndColumnMappings[file] || {};
        const range = {
          start: lineAndColumnMapping[start] || {
            line: null,
            column: null
          },
          end: lineAndColumnMapping[start + length] || {
            line: null,
            column: null
          }
        };

        if (range.start.line === null) {
          debug("sourceMap %o", sourceMap);
        }

        return (0, _extends3.default)({}, instruction, {

          jump,
          start,
          length,
          file,
          range
        });
      });
    }),

    /**
     * solidity.current.instructionAtProgramCounter
     */
    instructionAtProgramCounter: (0, _reselectTree.createLeaf)(["./instructions"], instructions => (0, _assign2.default)({}, ...instructions.map(instruction => ({
      [instruction.pc]: instruction
    }))))

  }, createMultistepSelectors(_selectors2.default.current.step), {

    /**
     * solidity.current.isSourceRangeFinal
     */
    isSourceRangeFinal: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors2.default.current.step.programCounter, _selectors2.default.next.step.programCounter], (map, current, next) => {
      if (!map[next]) {
        return true;
      }

      current = map[current];
      next = map[next];

      return current.start != next.start || current.length != next.length || current.file != next.file;
    }),

    /*
     * solidity.current.functionsByProgramCounter
     */
    functionsByProgramCounter: (0, _reselectTree.createLeaf)(["./instructions", "/info/sources"], (instructions, sources) => (0, _assign2.default)({}, ...instructions.filter(instruction => instruction.name === "JUMPDEST").filter(instruction => instruction.file !== -1)
    //note that the designated invalid function *does* have an associated
    //file, so it *is* safe to just filter out the ones that don't
    .map(instruction => {
      debug("instruction %O", instruction);
      let source = instruction.file;
      debug("source %O", sources[source]);
      let ast = sources[source].ast;
      let range = getSourceRange(instruction);
      let pointer = (0, _map.findRange)(ast, range.start, range.length);
      let node = pointer ? _jsonPointer2.default.get(ast, pointer) : _jsonPointer2.default.get(ast, "");
      if (!node || node.nodeType !== "FunctionDefinition") {
        //filter out JUMPDESTs that aren't function definitions...
        //except for the designated invalid function
        let nextInstruction = instructions[instruction.index + 1] || {};
        if (nextInstruction.name === "INVALID") {
          //designated invalid, include it
          return {
            [instruction.pc]: {
              isDesignatedInvalid: true
            }
          };
        } else {
          //not designated invalid, filter it out
          return {};
        }
      }
      //otherwise, we're good to go, so let's find the contract node and
      //put it all together
      //to get the contract node, we go up twice from the function node;
      //the path from one to the other should have a very specific form,
      //so this is easy
      let contractPointer = pointer.replace(/\/nodes\/\d+$/, "");
      let contractNode = _jsonPointer2.default.get(ast, contractPointer);
      return {
        [instruction.pc]: {
          source,
          pointer,
          node,
          name: node.name,
          id: node.id,
          contractPointer,
          contractNode,
          contractName: contractNode.name,
          contractId: contractNode.id,
          contractKind: contractNode.contractKind,
          isDesignatedInvalid: false
        }
      };
    }))),

    /**
     * solidity.current.isMultiline
     */
    isMultiline: (0, _reselectTree.createLeaf)(["./sourceRange"], ({ lines }) => lines.start.line != lines.end.line),

    /**
     * solidity.current.willJump
     */
    willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], isJump => isJump),

    /**
     * solidity.current.jumpDirection
     */
    jumpDirection: (0, _reselectTree.createLeaf)(["./instruction"], (i = {}) => i.jump || "-"),

    /**
     * solidity.current.willCall
     */
    willCall: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isCall], x => x),

    /**
     * solidity.current.willCreate
     */
    willCreate: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isCreate], x => x),

    /**
     * solidity.current.callsPrecompileOrExternal
     */
    callsPrecompileOrExternal: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.callsPrecompileOrExternal], x => x),

    /**
     * solidity.current.willReturn
     */
    willReturn: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isHalting], isHalting => isHalting),

    /**
     * solidity.current.willFail
     */
    willFail: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isExceptionalHalting], x => x),

    /*
     * solidity.current.nextMapped
     * returns the next trace step after this one which is sourcemapped
     * HACK: this assumes we're not about to change context! don't use this if
     * we are!
     * ALSO, this may return undefined, so be prepared for that
     */
    nextMapped: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors4.default.steps, _selectors4.default.index], (map, steps, index) => steps.slice(index + 1).find(({ pc }) => map[pc] && map[pc].file !== -1))
  }),

  /**
   * solidity.next
   * HACK WARNING: do not use these selectors when the current instruction is a
   * context change! (evm call or evm return)
   */
  next: createMultistepSelectors(_selectors2.default.next.step)
});

exports.default = solidity;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveSteps = saveSteps;
exports.next = next;
exports.tick = tick;
exports.tock = tock;
exports.endTrace = endTrace;
exports.reset = reset;
exports.unloadTransaction = unloadTransaction;
exports.backtick = backtick;
const SAVE_STEPS = exports.SAVE_STEPS = "SAVE_STEPS";
function saveSteps(steps) {
  return {
    type: SAVE_STEPS,
    steps
  };
}

const NEXT = exports.NEXT = "NEXT";
function next() {
  return { type: NEXT };
}

const TICK = exports.TICK = "TICK";
function tick() {
  return { type: TICK };
}

const TOCK = exports.TOCK = "TOCK";
function tock() {
  return { type: TOCK };
}

const END_OF_TRACE = exports.END_OF_TRACE = "EOT";
function endTrace() {
  return { type: END_OF_TRACE };
}

const RESET = exports.RESET = "TRACE_RESET";
function reset() {
  return { type: RESET };
}

const UNLOAD_TRANSACTION = exports.UNLOAD_TRANSACTION = "TRACE_UNLOAD_TRANSACTION";
function unloadTransaction() {
  return { type: UNLOAD_TRANSACTION };
}

const BACKTICK = exports.BACKTICK = "BACKTICK";
function backtick() {
  return { type: BACKTICK };
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = __webpack_require__(28);

var _set2 = _interopRequireDefault(_set);

exports.advance = advance;
exports.signalTickSagaCompletion = signalTickSagaCompletion;
exports.processTrace = processTrace;
exports.reset = reset;
exports.unload = unload;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(5);

var _helpers = __webpack_require__(1);

var _truffleDecodeUtils = __webpack_require__(4);

var DecodeUtils = _interopRequireWildcard(_truffleDecodeUtils);

var _actions = __webpack_require__(12);

var actions = _interopRequireWildcard(_actions);

var _selectors = __webpack_require__(10);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:trace:sagas");

function* advance() {
  yield (0, _effects.put)(actions.next());

  debug("TOCK to take");
  yield (0, _effects.take)([actions.TOCK, actions.END_OF_TRACE]);
  debug("TOCK taken");
}

const SUBMODULE_COUNT = 3; //data, evm, solidity

function* next() {
  let remaining = yield (0, _effects.select)(_selectors2.default.stepsRemaining);
  debug("remaining: %o", remaining);
  let steps = yield (0, _effects.select)(_selectors2.default.steps);
  debug("total steps: %o", steps.length);
  let waitingForSubmodules = 0;

  if (remaining > 0) {
    debug("putting TICK");
    // updates state for current step
    waitingForSubmodules = SUBMODULE_COUNT;
    yield (0, _effects.put)(actions.tick());
    debug("put TICK");

    //wait for all backticks before continuing
    while (waitingForSubmodules > 0) {
      yield (0, _effects.take)(actions.BACKTICK);
      debug("got BACKTICK");
      waitingForSubmodules--;
    }

    remaining--; // local update, just for convenience
  }

  if (remaining) {
    debug("putting TOCK");
    // updates step to next step in trace
    yield (0, _effects.put)(actions.tock());
    debug("put TOCK");
  } else {
    debug("putting END_OF_TRACE");
    yield (0, _effects.put)(actions.endTrace());
    debug("put END_OF_TRACE");
  }
}

function* signalTickSagaCompletion() {
  yield (0, _effects.put)(actions.backtick());
}

function* processTrace(steps) {
  yield (0, _effects.put)(actions.saveSteps(steps));

  let addresses = [...new _set2.default(steps.map(({ op, stack }) => (0, _helpers.isCallMnemonic)(op) ? //if it's a call, just fetch the address off the stack
  DecodeUtils.Conversion.toAddress(stack[stack.length - 2]) : //if it's not a call, just return undefined (we've gone back to
  //skipping creates)
  undefined)
  //filter out zero addresses from failed creates (as well as undefineds)
  .filter(address => address !== undefined && address !== DecodeUtils.EVM.ZERO_ADDRESS))];

  return addresses;
}

function* reset() {
  yield (0, _effects.put)(actions.reset());
}

function* unload() {
  yield (0, _effects.put)(actions.unloadTransaction());
}

function* saga() {
  yield (0, _effects.takeEvery)(actions.NEXT, next);
}

exports.default = (0, _helpers.prefixName)("trace", saga);

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.start = start;
exports.loadTransaction = loadTransaction;
exports.interrupt = interrupt;
exports.unloadTransaction = unloadTransaction;
exports.ready = ready;
exports.wait = wait;
exports.error = error;
exports.clearError = clearError;
exports.recordContracts = recordContracts;
exports.saveTransaction = saveTransaction;
exports.saveReceipt = saveReceipt;
exports.saveBlock = saveBlock;
const START = exports.START = "SESSION_START";
function start(provider, txHash) {
  return {
    type: START,
    provider,
    txHash //OPTIONAL
  };
}

const LOAD_TRANSACTION = exports.LOAD_TRANSACTION = "LOAD_TRANSACTION";
function loadTransaction(txHash) {
  return {
    type: LOAD_TRANSACTION,
    txHash
  };
}

const INTERRUPT = exports.INTERRUPT = "SESSION_INTERRUPT";
function interrupt() {
  return { type: INTERRUPT };
}

const UNLOAD_TRANSACTION = exports.UNLOAD_TRANSACTION = "UNLOAD_TRANSACTION";
function unloadTransaction() {
  return {
    type: UNLOAD_TRANSACTION
  };
}

const READY = exports.READY = "SESSION_READY";
function ready() {
  return {
    type: READY
  };
}

const WAIT = exports.WAIT = "SESSION_WAIT";
function wait() {
  return {
    type: WAIT
  };
}

const ERROR = exports.ERROR = "SESSION_ERROR";
function error(error) {
  return {
    type: ERROR,
    error
  };
}

const CLEAR_ERROR = exports.CLEAR_ERROR = "CLEAR_ERROR";
function clearError() {
  return {
    type: CLEAR_ERROR
  };
}

const RECORD_CONTRACTS = exports.RECORD_CONTRACTS = "RECORD_CONTRACTS";
function recordContracts(contexts, sources) {
  return {
    type: RECORD_CONTRACTS,
    contexts,
    sources
  };
}

const SAVE_TRANSACTION = exports.SAVE_TRANSACTION = "SAVE_TRANSACTION";
function saveTransaction(transaction) {
  return {
    type: SAVE_TRANSACTION,
    transaction
  };
}

const SAVE_RECEIPT = exports.SAVE_RECEIPT = "SAVE_RECEIPT";
function saveReceipt(receipt) {
  return {
    type: SAVE_RECEIPT,
    receipt
  };
}

const SAVE_BLOCK = exports.SAVE_BLOCK = "SAVE_BLOCK";
function saveBlock(block) {
  return {
    type: SAVE_BLOCK,
    block
  };
}

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("bn.js");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/keys");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(2);

var _extends3 = _interopRequireDefault(_extends2);

exports.scope = scope;
exports.declare = declare;
exports.defineType = defineType;
exports.decode = decode;
exports.reset = reset;
exports.recordAllocations = recordAllocations;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(5);

var _helpers = __webpack_require__(1);

var _actions = __webpack_require__(12);

var _actions2 = __webpack_require__(27);

var actions = _interopRequireWildcard(_actions2);

var _sagas = __webpack_require__(13);

var trace = _interopRequireWildcard(_sagas);

var _sagas2 = __webpack_require__(23);

var evm = _interopRequireWildcard(_sagas2);

var _sagas3 = __webpack_require__(30);

var web3 = _interopRequireWildcard(_sagas3);

var _selectors = __webpack_require__(21);

var _selectors2 = _interopRequireDefault(_selectors);

var _lodash = __webpack_require__(58);

var _lodash2 = _interopRequireDefault(_lodash);

var _truffleDecodeUtils = __webpack_require__(4);

var DecodeUtils = _interopRequireWildcard(_truffleDecodeUtils);

var _truffleDecoder = __webpack_require__(32);

var _bn = __webpack_require__(15);

var _bn2 = _interopRequireDefault(_bn);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:data:sagas");

function* scope(nodeId, pointer, parentId, sourceId) {
  yield (0, _effects.put)(actions.scope(nodeId, pointer, parentId, sourceId));
}

function* declare(node) {
  yield (0, _effects.put)(actions.declare(node));
}

function* defineType(node) {
  yield (0, _effects.put)(actions.defineType(node));
}

function* tickSaga() {
  debug("got TICK");

  yield* variablesAndMappingsSaga();
  debug("about to SUBTOCK");
  yield* trace.signalTickSagaCompletion();
}

function* decode(definition, ref) {
  let referenceDeclarations = yield (0, _effects.select)(_selectors2.default.views.referenceDeclarations);
  let state = yield (0, _effects.select)(_selectors2.default.current.state);
  let mappingKeys = yield (0, _effects.select)(_selectors2.default.views.mappingKeys);
  let allocations = yield (0, _effects.select)(_selectors2.default.info.allocations);
  let instances = yield (0, _effects.select)(_selectors2.default.views.instances);
  let contexts = yield (0, _effects.select)(_selectors2.default.views.contexts);
  let currentContext = yield (0, _effects.select)(_selectors2.default.current.context);
  let internalFunctionsTable = yield (0, _effects.select)(_selectors2.default.current.functionsByProgramCounter);
  let blockNumber = yield (0, _effects.select)(_selectors2.default.views.blockNumber);

  let ZERO_WORD = new Uint8Array(DecodeUtils.EVM.WORD_SIZE);
  ZERO_WORD.fill(0);
  let NO_CODE = new Uint8Array(); //empty array

  let decoder = (0, _truffleDecoder.forEvmState)(definition, ref, {
    referenceDeclarations,
    state,
    mappingKeys,
    storageAllocations: allocations.storage,
    memoryAllocations: allocations.memory,
    calldataAllocations: allocations.calldata,
    contexts,
    currentContext,
    internalFunctionsTable
  });

  let result = decoder.next();
  while (!result.done) {
    let request = result.value;
    let response;
    switch (request.type) {
      case "storage":
        //the debugger supplies all storage it knows at the beginning.
        //any storage it does not know is presumed to be zero.
        response = ZERO_WORD;
        break;
      case "code":
        let address = request.address;
        if (address in instances) {
          response = instances[address];
        } else if (address === DecodeUtils.EVM.ZERO_ADDRESS) {
          //HACK: to avoid displaying the zero address to the user as an
          //affected address just because they decoded a contract or external
          //function variable that hadn't been initialized yet, we give the
          //zero address's codelessness its own private cache :P
          response = NO_CODE;
        } else {
          //I don't want to write a new web3 saga, so let's just use
          //obtainBinaries with a one-element array
          debug("fetching binary");
          let binary = (yield* web3.obtainBinaries([address], blockNumber))[0];
          debug("adding instance");
          yield* evm.addInstance(address, binary);
          response = DecodeUtils.Conversion.toBytes(binary);
        }
        break;
      default:
        debug("unrecognized request type!");
    }
    result = decoder.next(response);
  }
  //at this point, result.value holds the final value
  //note: we're still using the old decoder output format, so we need to clean
  //containers before returning something the debugger can use
  return DecodeUtils.Conversion.cleanContainers(result.value);
}

function* variablesAndMappingsSaga() {
  let node = yield (0, _effects.select)(_selectors2.default.current.node);
  let scopes = yield (0, _effects.select)(_selectors2.default.views.scopes.inlined);
  let referenceDeclarations = yield (0, _effects.select)(_selectors2.default.views.referenceDeclarations);
  let allocations = yield (0, _effects.select)(_selectors2.default.info.allocations.storage);
  let currentAssignments = yield (0, _effects.select)(_selectors2.default.proc.assignments);
  let mappedPaths = yield (0, _effects.select)(_selectors2.default.proc.mappedPaths);
  let currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  let address = yield (0, _effects.select)(_selectors2.default.current.address);
  //storage address, not code address

  let stack = yield (0, _effects.select)(_selectors2.default.next.state.stack); //note the use of next!
  //in this saga we are interested in the *results* of the current instruction
  //note that the decoder is still based on data.current.state; that's fine
  //though.  There's already a delay between when we record things off the
  //stack and when we decode them, after all.  Basically, nothing serious
  //should happen after an index node but before the index access node that
  //would cause storage, memory, or calldata to change, meaning that even if
  //the literal we recorded was a pointer, it will still be valid at the time
  //we use it.  (The other literals we make use of, for the base expressions,
  //are not decoded, so no potential mismatch there would be relevant anyway.)

  let alternateStack = yield (0, _effects.select)(_selectors2.default.nextMapped.state.stack);
  //HACK: unfortunately, in some cases, data.next.state.stack gets the wrong
  //results due to unmapped instructions intervening.  So, we get the stack at
  //the next *mapped* stack instead.  This is something of a hack and won't
  //work if we're about to change context, but it should work in the cases that
  //need it.

  if (!stack) {
    return;
  }

  let top = stack.length - 1;
  var assignment, assignments, preambleAssignments, baseExpression, slot, path;

  if (!node) {
    return;
  }

  // stack is only ready for interpretation after the last step of each
  // source range
  //
  // the data module always looks at the result of a particular opcode
  // (i.e., the following trace step's stack/memory/storage), so this
  // asserts that the _current_ operation is the final one before
  // proceeding
  if (!(yield (0, _effects.select)(_selectors2.default.views.atLastInstructionForSourceRange))) {
    return;
  }

  //HACK: modifier preamble
  //modifier definitions are typically skipped (this includes constructor
  //definitions when called as a base constructor); as such I've added this
  //"modifier preamble" to catch them
  if (yield (0, _effects.select)(_selectors2.default.current.aboutToModify)) {
    let modifier = yield (0, _effects.select)(_selectors2.default.current.modifierBeingInvoked);
    //may be either a modifier or base constructor
    let currentIndex = yield (0, _effects.select)(_selectors2.default.current.modifierArgumentIndex);
    debug("currentIndex %d", currentIndex);
    let parameters = modifier.parameters.parameters;
    //now: look at the parameters *after* the current index.  we'll need to
    //adjust for those.
    let parametersLeft = parameters.slice(currentIndex + 1);
    let adjustment = (0, _lodash2.default)(parametersLeft.map(DecodeUtils.Definition.stackSize));
    debug("adjustment %d", adjustment);
    preambleAssignments = assignParameters(parameters, top + adjustment, currentDepth);
  } else {
    preambleAssignments = {};
  }

  switch (node.nodeType) {
    case "FunctionDefinition":
    case "ModifierDefinition":
      //NOTE: this will *not* catch most modifier definitions!
      //the rest hopefully will be caught by the modifier preamble
      //(in fact they won't all be, but...)

      //HACK: filter out some garbage
      //this filters out the case where we're really in an invocation of a
      //modifier or base constructor, but have temporarily hit the definition
      //node for some reason.  However this obviously can have a false positive
      //in the case where a function has the same modifier twice.
      let nextModifier = yield (0, _effects.select)(_selectors2.default.next.modifierBeingInvoked);
      if (nextModifier && nextModifier.id === node.id) {
        break;
      }

      let parameters = node.parameters.parameters;
      //note that we do *not* include return parameters, since those are
      //handled by the VariableDeclaration case (no, I don't know why it
      //works out that way)

      //we can skip preambleAssignments here, that isn't used in this case
      assignments = assignParameters(parameters, top, currentDepth);

      debug("Function definition case");
      debug("assignments %O", assignments);

      yield (0, _effects.put)(actions.assign(assignments));
      break;

    case "ContractDefinition":
      let allocation = allocations[node.id];

      debug("Contract definition case");
      debug("allocations %O", allocations);
      debug("allocation %O", allocation);
      assignments = {};
      for (let id in allocation.members) {
        id = Number(id); //not sure why we're getting them as strings, but...
        let idObj = { astId: id, address };
        let fullId = (0, _helpers.stableKeccak256)(idObj);
        //we don't use makeAssignment here as we had to compute the ID anyway
        assignment = (0, _extends3.default)({}, idObj, {
          id: fullId,
          ref: (0, _extends3.default)({}, (currentAssignments.byId[fullId] || {}).ref || {}, allocation.members[id].pointer)
        });
        assignments[fullId] = assignment;
      }
      debug("assignments %O", assignments);

      //this case doesn't need preambleAssignments either
      yield (0, _effects.put)(actions.assign(assignments));
      break;

    case "FunctionTypeName":
      //HACK
      //for some reasons, for declarations of local variables of function type,
      //we land on the FunctionTypeName instead of the VariableDeclaration,
      //so we replace the node with its parent (the VariableDeclaration)
      node = scopes[scopes[node.id].parentId].definition;
      //let's do a quick check that it *is* a VariableDeclaration before
      //continuing
      if (node.nodeType !== "VariableDeclaration") {
        break;
      }
    //otherwise, deliberately fall through to the VariableDeclaration case
    //NOTE: DELIBERATE FALL-THROUGH
    case "VariableDeclaration":
      let varId = node.id;
      debug("Variable declaration case");
      debug("currentDepth %d varId %d", currentDepth, varId);

      //NOTE: We're going to make the assignment conditional here; here's why.
      //There's a bug where calling the autogenerated accessor for a public
      //contract variable causes the debugger to see two additional
      //declarations for that variable... which this code reads as local
      //variable declarations.  Rather than prevent this at the source, we're
      //just going to check for it here, by not adding a local variable if said
      //variable is already a contract variable.

      if (currentAssignments.byAstId[varId] !== undefined && currentAssignments.byAstId[varId].some(id => currentAssignments.byId[id].address !== undefined)) {
        debug("already a contract variable!");
        break;
      }

      //otherwise, go ahead and make the assignment
      assignment = (0, _helpers.makeAssignment)({ astId: varId, stackframe: currentDepth }, {
        stack: {
          from: top - DecodeUtils.Definition.stackSize(node) + 1,
          to: top
        }
      });
      assignments = { [assignment.id]: assignment };
      //this case doesn't need preambleAssignments either
      debug("assignments: %O", assignments);
      yield (0, _effects.put)(actions.assign(assignments));
      break;

    case "IndexAccess":
      // to track `mapping` types known indices
      // (and also *some* known indices for arrays)

      //HACK: we use the alternate stack in this case

      debug("Index access case");

      //we're going to start by doing the same thing as in the default case
      //(see below) -- getting things ready for an assignment.  Then we're
      //going to forget this for a bit while we handle the rest...
      assignments = (0, _extends3.default)({}, preambleAssignments, literalAssignments(node, alternateStack, currentDepth));

      //we'll need this
      baseExpression = node.baseExpression;

      //but first, a diversion -- is this something that could not *possibly*
      //lead to a mapping?  i.e., either a bytes, or an array of non-reference
      //types, or a non-storage array?
      //if so, we'll just do the assign and quit out early
      //(note: we write it this way because mappings aren't caught by
      //isReference)
      if (DecodeUtils.Definition.typeClass(baseExpression) === "bytes" || DecodeUtils.Definition.typeClass(baseExpression) === "array" && (DecodeUtils.Definition.isReference(node) ? DecodeUtils.Definition.referenceType(baseExpression) !== "storage" : !DecodeUtils.Definition.isMapping(node))) {
        debug("Index case bailed out early");
        debug("typeClass %s", DecodeUtils.Definition.typeClass(baseExpression));
        debug("referenceType %s", DecodeUtils.Definition.referenceType(baseExpression));
        debug("isReference(node) %o", DecodeUtils.Definition.isReference(node));
        yield (0, _effects.put)(actions.assign(assignments));
        break;
      }

      let keyDefinition = DecodeUtils.Definition.keyDefinition(baseExpression, scopes);
      //if we're dealing with an array, this will just hack up a uint definition
      //:)

      //begin subsection: key decoding
      //(I tried factoring this out into its own saga but it didn't work when I
      //did :P )

      let indexValue;
      let indexDefinition = node.indexExpression;

      //why the loop? see the end of the block it heads for an explanatory
      //comment
      while (indexValue === undefined) {
        let indexId = indexDefinition.id;
        //indices need to be identified by stackframe
        let indexIdObj = { astId: indexId, stackframe: currentDepth };
        let fullIndexId = (0, _helpers.stableKeccak256)(indexIdObj);

        const indexReference = (currentAssignments.byId[fullIndexId] || {}).ref;

        if (DecodeUtils.Definition.isSimpleConstant(indexDefinition)) {
          //while the main case is the next one, where we look for a prior
          //assignment, we need this case (and need it first) for two reasons:
          //1. some constant expressions (specifically, string and hex literals)
          //aren't sourcemapped to and so won't have a prior assignment
          //2. if the key type is bytesN but the expression is constant, the
          //value will go on the stack *left*-padded instead of right-padded,
          //so looking for a prior assignment will read the wrong value.
          //so instead it's preferable to use the constant directly.
          debug("about to decode simple literal");
          indexValue = yield* decode(keyDefinition, {
            definition: indexDefinition
          });
        } else if (indexReference) {
          //if a prior assignment is found
          let splicedDefinition;
          //in general, we want to decode using the key definition, not the index
          //definition. however, the key definition may have the wrong location
          //on it.  so, when applicable, we splice the index definition location
          //onto the key definition location.
          if (DecodeUtils.Definition.isReference(indexDefinition)) {
            splicedDefinition = DecodeUtils.Definition.spliceLocation(keyDefinition, DecodeUtils.Definition.referenceType(indexDefinition));
            //we could put code here to add on the "_ptr" ending when absent,
            //but we presently ignore that ending, so we'll skip that
          } else {
            splicedDefinition = keyDefinition;
          }
          debug("about to decode");
          indexValue = yield* decode(splicedDefinition, indexReference);
        } else if (indexDefinition.referencedDeclaration && scopes[indexDefinition.referenceDeclaration]) {
          //there's one more reason we might have failed to decode it: it might be a
          //constant state variable.  Unfortunately, we don't know how to decode all
          //those at the moment, but we can handle the ones we do know how to decode.
          //In the future hopefully we will decode all of them
          debug("referencedDeclaration %d", indexDefinition.referencedDeclaration);
          let indexConstantDeclaration = scopes[indexDefinition.referencedDeclaration].definition;
          debug("indexConstantDeclaration %O", indexConstantDeclaration);
          if (indexConstantDeclaration.constant) {
            let indexConstantDefinition = indexConstantDeclaration.value;
            //next line filters out constants we don't know how to handle
            if (DecodeUtils.Definition.isSimpleConstant(indexConstantDefinition)) {
              debug("about to decode simple constant");
              indexValue = yield* decode(keyDefinition, {
                definition: indexConstantDeclaration.value
              });
            }
          }
        }
        //there's still one more reason we might have failed to decode it:
        //certain (silent) type conversions aren't sourcemapped either.
        //(thankfully, any type conversion that actually *does* something seems
        //to be sourcemapped.)  So if we've failed to decode it, we try again
        //with the argument of the type conversion, if it is one; we leave
        //indexValue undefined so the loop will continue
        //(note that this case is last for a reason; if this were earlier, it
        //would catch *non*-silent type conversions, which we want to just read
        //off the stack)
        else if (indexDefinition.kind === "typeConversion") {
            indexDefinition = indexDefinition.arguments[0];
          }
          //otherwise, we've just totally failed to decode it, so we mark
          //indexValue as null (as distinct from undefined) to indicate this.  In
          //the future, we should be able to decode all mapping keys, but we're
          //not quite there yet, sorry (because we can't yet handle all constant
          //state variables)
          else {
              indexValue = null;
            }
        //now, as mentioned, retry in the typeConversion case
      }

      //end subsection: key decoding

      debug("index value %O", indexValue);
      debug("keyDefinition %o", keyDefinition);

      //whew! But we're not done yet -- we need to turn this decoded key into
      //an actual path (assuming we *did* decode it)
      //OK, not an actual path -- we're just going to use a simple offset for
      //the path.  But that's OK, because the mappedPaths reducer will turn
      //it into an actual path.
      if (indexValue !== null) {
        path = fetchBasePath(baseExpression, mappedPaths, currentAssignments, currentDepth);

        let slot = { path };

        //we need to do things differently depending on whether we're dealing
        //with an array or mapping
        switch (DecodeUtils.Definition.typeClass(baseExpression)) {
          case "array":
            slot.hashPath = DecodeUtils.Definition.isDynamicArray(baseExpression);
            slot.offset = indexValue.muln((0, _truffleDecoder.storageSize)(node, referenceDeclarations, allocations).words);
            break;
          case "mapping":
            slot.key = indexValue;
            slot.keyEncoding = DecodeUtils.Definition.keyEncoding(keyDefinition);
            slot.offset = new _bn2.default(0);
            break;
          default:
            debug("unrecognized index access!");
        }
        debug("slot %O", slot);

        //now, map it! (and do the assign as well)
        yield (0, _effects.put)(actions.mapPathAndAssign(address, slot, assignments, DecodeUtils.Definition.typeIdentifier(node), DecodeUtils.Definition.typeIdentifier(baseExpression)));
      } else {
        //if we failed to decode, just do the assign from above
        debug("failed to decode, just assigning");
        yield (0, _effects.put)(actions.assign(assignments));
      }

      break;

    case "MemberAccess":
      //HACK: we use the alternate stack in this case

      //we're going to start by doing the same thing as in the default case
      //(see below) -- getting things ready for an assignment.  Then we're
      //going to forget this for a bit while we handle the rest...
      assignments = (0, _extends3.default)({}, preambleAssignments, literalAssignments(node, alternateStack, currentDepth));

      debug("Member access case");

      //MemberAccess uses expression, not baseExpression
      baseExpression = node.expression;

      //if this isn't a storage struct, or the element isn't of reference type,
      //we'll just do the assignment and quit out (again, note that mappings
      //aren't caught by isReference)
      if (DecodeUtils.Definition.typeClass(baseExpression) !== "struct" || (DecodeUtils.Definition.isReference(node) ? DecodeUtils.Definition.referenceType(baseExpression) !== "storage" : !DecodeUtils.Definition.isMapping(node))) {
        debug("Member case bailed out early");
        yield (0, _effects.put)(actions.assign(assignments));
        break;
      }

      //but if it is a storage struct, we have to map the path as well
      path = fetchBasePath(baseExpression, mappedPaths, currentAssignments, currentDepth);

      slot = { path };

      let structId = DecodeUtils.Definition.typeId(baseExpression);
      let memberAllocation = allocations[structId].members[node.referencedDeclaration];

      slot.offset = memberAllocation.pointer.storage.from.slot.offset.clone();

      debug("slot %o", slot);
      yield (0, _effects.put)(actions.mapPathAndAssign(address, slot, assignments, DecodeUtils.Definition.typeIdentifier(node), DecodeUtils.Definition.typeIdentifier(baseExpression)));

    default:
      if (node.typeDescriptions == undefined) {
        break;
      }

      debug("decoding expression value %O", node.typeDescriptions);
      debug("default case");
      debug("currentDepth %d node.id %d", currentDepth, node.id);

      assignments = (0, _extends3.default)({}, preambleAssignments, literalAssignments(node, stack, currentDepth));
      yield (0, _effects.put)(actions.assign(assignments));
      break;
  }
}

function* reset() {
  yield (0, _effects.put)(actions.reset());
}

function* recordAllocations() {
  const contracts = yield (0, _effects.select)(_selectors2.default.views.userDefinedTypes.contractDefinitions);
  debug("contracts %O", contracts);
  const referenceDeclarations = yield (0, _effects.select)(_selectors2.default.views.referenceDeclarations);
  debug("referenceDeclarations %O", referenceDeclarations);
  const storageAllocations = (0, _truffleDecoder.getStorageAllocations)(referenceDeclarations, contracts);
  debug("storageAllocations %O", storageAllocations);
  const memoryAllocations = (0, _truffleDecoder.getMemoryAllocations)(referenceDeclarations);
  const calldataAllocations = (0, _truffleDecoder.getCalldataAllocations)(referenceDeclarations);
  yield (0, _effects.put)(actions.allocate(storageAllocations, memoryAllocations, calldataAllocations));
}

function literalAssignments(node, stack, currentDepth) {
  let top = stack.length - 1;

  let literal = (0, _truffleDecoder.readStack)(stack, top - DecodeUtils.Definition.stackSize(node) + 1, top);

  let assignment = (0, _helpers.makeAssignment)({ astId: node.id, stackframe: currentDepth }, { literal });

  return { [assignment.id]: assignment };
}

//takes a parameter list as given in the AST
function assignParameters(parameters, top, functionDepth) {
  let reverseParameters = parameters.slice().reverse();
  //reverse is in-place, so we use slice() to clone first
  debug("reverseParameters %o", parameters);

  let currentPosition = top;
  let assignments = {};

  for (let parameter of reverseParameters) {
    let words = DecodeUtils.Definition.stackSize(parameter);
    let pointer = {
      stack: {
        from: currentPosition - words + 1,
        to: currentPosition
      }
    };
    let assignment = (0, _helpers.makeAssignment)({ astId: parameter.id, stackframe: functionDepth }, pointer);
    assignments[assignment.id] = assignment;
    currentPosition -= words;
  }
  return assignments;
}

function fetchBasePath(baseNode, mappedPaths, currentAssignments, currentDepth) {
  let fullId = (0, _helpers.stableKeccak256)({
    astId: baseNode.id,
    stackframe: currentDepth
  });
  debug("astId: %d", baseNode.id);
  debug("stackframe: %d", currentDepth);
  debug("fullId: %s", fullId);
  debug("currentAssignments: %O", currentAssignments);
  //base expression is an expression, and so has a literal assigned to
  //it
  let offset = DecodeUtils.Conversion.toBN(currentAssignments.byId[fullId].ref.literal);
  return { offset };
}

function* saga() {
  yield (0, _effects.takeEvery)(_actions.TICK, tickSaga);
}

exports.default = (0, _helpers.prefixName)("data", saga);

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/asyncToGenerator");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/values");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.advance = advance;
exports.stepNext = stepNext;
exports.stepOver = stepOver;
exports.stepInto = stepInto;
exports.stepOut = stepOut;
exports.reset = reset;
exports.interrupt = interrupt;
exports.continueUntilBreakpoint = continueUntilBreakpoint;
exports.addBreakpoint = addBreakpoint;
exports.removeBreakpoint = removeBreakpoint;
exports.removeAllBreakpoints = removeAllBreakpoints;
exports.startStepping = startStepping;
exports.doneStepping = doneStepping;
const ADVANCE = exports.ADVANCE = "ADVANCE";
function advance(count) {
  return { type: ADVANCE, count };
}

const STEP_NEXT = exports.STEP_NEXT = "STEP_NEXT";
function stepNext() {
  return { type: STEP_NEXT };
}

const STEP_OVER = exports.STEP_OVER = "STEP_OVER";
function stepOver() {
  return { type: STEP_OVER };
}

const STEP_INTO = exports.STEP_INTO = "STEP_INTO";
function stepInto() {
  return { type: STEP_INTO };
}

const STEP_OUT = exports.STEP_OUT = "STEP_OUT";
function stepOut() {
  return { type: STEP_OUT };
}

const RESET = exports.RESET = "RESET";
function reset() {
  return { type: RESET };
}

const INTERRUPT = exports.INTERRUPT = "CONTROLLER_INTERRUPT";
function interrupt() {
  return { type: INTERRUPT };
}

const CONTINUE = exports.CONTINUE = "CONTINUE";
function continueUntilBreakpoint(breakpoints) {
  //"continue" is not a legal name
  return {
    type: CONTINUE,
    breakpoints
  };
}

const ADD_BREAKPOINT = exports.ADD_BREAKPOINT = "ADD_BREAKPOINT";
function addBreakpoint(breakpoint) {
  return {
    type: ADD_BREAKPOINT,
    breakpoint
  };
}

const REMOVE_BREAKPOINT = exports.REMOVE_BREAKPOINT = "REMOVE_BREAKPOINT";
function removeBreakpoint(breakpoint) {
  return {
    type: REMOVE_BREAKPOINT,
    breakpoint
  };
}

const REMOVE_ALL_BREAKPOINTS = exports.REMOVE_ALL_BREAKPOINTS = "REMOVE_ALL_BREAKPOINTS";
function removeAllBreakpoints() {
  return {
    type: REMOVE_ALL_BREAKPOINTS
  };
}

const START_STEPPING = exports.START_STEPPING = "START_STEPPING";
function startStepping() {
  return {
    type: START_STEPPING
  };
}

const DONE_STEPPING = exports.DONE_STEPPING = "DONE_STEPPING";
function doneStepping() {
  return {
    type: DONE_STEPPING
  };
}

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _values = __webpack_require__(19);

var _values2 = _interopRequireDefault(_values);

var _extends2 = __webpack_require__(2);

var _extends3 = _interopRequireDefault(_extends2);

var _entries = __webpack_require__(6);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(8);

var _assign2 = _interopRequireDefault(_assign);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(3);

var _jsonPointer = __webpack_require__(22);

var _jsonPointer2 = _interopRequireDefault(_jsonPointer);

var _helpers = __webpack_require__(1);

var _selectors = __webpack_require__(9);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(11);

var _selectors4 = _interopRequireDefault(_selectors3);

var _truffleDecodeUtils = __webpack_require__(4);

var DecodeUtils = _interopRequireWildcard(_truffleDecodeUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:data:selectors");

/**
 * @private
 */
const identity = x => x;

function findAncestorOfType(node, types, scopes) {
  //note: I'm not including any protection against null in this function.
  //You are advised to include "SourceUnit" as a fallback type.
  while (node && !types.includes(node.nodeType)) {
    node = scopes[scopes[node.id].parentId].definition;
  }
  return node;
}

//given a modifier invocation (or inheritance specifier) node,
//get the node for the actual modifier (or constructor)
function modifierForInvocation(invocation, scopes) {
  let rawId; //raw referencedDeclaration ID extracted from the AST.
  //if it's a modifier this is what we want, but if it's base
  //constructor, we'll get the contract instead, and need to find its
  //constructor.
  switch (invocation.nodeType) {
    case "ModifierInvocation":
      rawId = invocation.modifierName.referencedDeclaration;
      break;
    case "InheritanceSpecifier":
      rawId = invocation.baseName.referencedDeclaration;
      break;
    default:
      debug("bad invocation node");
  }
  let rawNode = scopes[rawId].definition;
  switch (rawNode.nodeType) {
    case "ModifierDefinition":
      return rawNode;
    case "ContractDefinition":
      return rawNode.nodes.find(node => node.nodeType === "FunctionDefinition" && node.kind === "constructor");
    default:
      //we should never hit this case
      return undefined;
  }
}

//see data.views.contexts for an explanation
function debuggerContextToDecoderContext(context) {
  let {
    contractName,
    binary,
    contractId,
    contractKind,
    isConstructor,
    abi
  } = context;
  return {
    contractName,
    binary,
    contractId,
    contractKind,
    isConstructor,
    abi: DecodeUtils.Contexts.abiToFunctionAbiWithSignatures(abi)
  };
}

const data = (0, _reselectTree.createSelectorTree)({
  state: state => state.data,

  /**
   * data.views
   */
  views: {
    /*
     * data.views.atLastInstructionForSourceRange
     */
    atLastInstructionForSourceRange: (0, _reselectTree.createLeaf)([_selectors4.default.current.isSourceRangeFinal], final => final),

    /**
     * data.views.scopes (namespace)
     */
    scopes: {
      /**
       * data.views.scopes.inlined (namespace)
       */
      inlined: {
        /**
         * data.views.scopes.inlined (selector)
         * see data.info.scopes for how this differs from the raw version
         */
        _: (0, _reselectTree.createLeaf)(["/info/scopes", "./raw"], (scopes, inlined) => (0, _assign2.default)({}, ...(0, _entries2.default)(inlined).map(([id, info]) => {
          let newInfo = (0, _extends3.default)({}, info);
          newInfo.variables = scopes[id].variables;
          return { [id]: newInfo };
        }))),

        /**
         * data.views.scopes.inlined.raw
         */
        raw: (0, _reselectTree.createLeaf)(["/info/scopes/raw", _selectors4.default.info.sources], (scopes, sources) => (0, _assign2.default)({}, ...(0, _entries2.default)(scopes).map(([id, entry]) => ({
          [id]: (0, _extends3.default)({}, entry, {

            definition: _jsonPointer2.default.get(sources[entry.sourceId].ast, entry.pointer)
          })
        }))))
      }
    },

    /*
     * data.views.userDefinedTypes
     */
    userDefinedTypes: {
      /*
       * data.views.userDefinedTypes.contractDefinitions
       * restrict to contracts only, and get their definitions
       */
      contractDefinitions: (0, _reselectTree.createLeaf)(["/info/userDefinedTypes", "/views/scopes/inlined"], (typeIds, scopes) => typeIds.map(id => scopes[id].definition).filter(node => node.nodeType === "ContractDefinition"))
    },

    /*
     * data.views.referenceDeclarations
     */
    referenceDeclarations: (0, _reselectTree.createLeaf)(["./scopes/inlined", "/info/userDefinedTypes"], (scopes, userDefinedTypes) => (0, _assign2.default)({}, ...userDefinedTypes.map(id => ({ [id]: scopes[id].definition })))),

    /**
     * data.views.mappingKeys
     */
    mappingKeys: (0, _reselectTree.createLeaf)(["/proc/mappedPaths", "/current/address"], (mappedPaths, address) => [].concat(...(0, _values2.default)((mappedPaths.byAddress[address] || { byType: {} }).byType).map(({ bySlotAddress }) => (0, _values2.default)(bySlotAddress))).filter(slot => slot.key !== undefined)),

    /*
     * data.views.blockNumber
     * returns block number as string
     */
    blockNumber: (0, _reselectTree.createLeaf)([_selectors2.default.transaction.globals.block], block => block.number.toString()),

    /*
     * data.views.instances
     * same as evm.current.codex.instances, but we just map address => binary,
     * we don't bother with context, and also the code is a Uint8Array
     */
    instances: (0, _reselectTree.createLeaf)([_selectors2.default.current.codex.instances], instances => (0, _assign2.default)({}, ...(0, _entries2.default)(instances).map(([address, { binary }]) => ({
      [address]: DecodeUtils.Conversion.toBytes(binary)
    })))),

    /*
     * data.views.contexts
     * same as evm.info.contexts, but:
     * 0. we only include non-constructor contexts
     * 1. we now index by contract ID rather than hash
     * 2. we strip out context, sourceMap, primarySource, and compiler
     * 3. we alter abi in several ways:
     * 3a. we strip abi down to just (ordinary) functions
     * 3b. we augment these functions with signatures (here meaning selectors)
     * 3c. abi is now an object, not an array, and indexed by these signatures
     */
    contexts: (0, _reselectTree.createLeaf)([_selectors2.default.info.contexts], contexts => (0, _assign2.default)({}, ...(0, _values2.default)(contexts).filter(context => !context.isConstructor).map(context => ({
      [context.contractId]: debuggerContextToDecoderContext(context)
    }))))
  },

  /**
   * data.info
   */
  info: {
    /**
     * data.info.scopes (namespace)
     */
    scopes: {
      /**
       * data.info.scopes (selector)
       * the raw version is below; this version accounts for inheritance
       * NOTE: doesn't this selector really belong in data.views?  Yes.
       * But, since it's replacing the old data.info.scopes (which is now
       * data.info.scopes.raw), I didn't want to move it.
       */
      _: (0, _reselectTree.createLeaf)(["./raw", "/views/scopes/inlined/raw"], (scopes, inlined) => (0, _assign2.default)({}, ...(0, _entries2.default)(scopes).map(([id, scope]) => {
        let definition = inlined[id].definition;
        if (definition.nodeType !== "ContractDefinition") {
          return { [id]: scope };
        }
        //if we've reached this point, we should be dealing with a
        //contract, and specifically a contract -- not an interface or
        //library (those don't get "variables" entries in their scopes)
        debug("contract id %d", id);
        let newScope = (0, _extends3.default)({}, scope);
        //note that Solidity gives us the linearization in order from most
        //derived to most base, but we want most base to most derived;
        //annoyingly, reverse() is in-place, so we clone with slice() first
        let linearizedBaseContractsFromBase = definition.linearizedBaseContracts.slice().reverse();
        //now, we put it all together
        newScope.variables = [].concat(...linearizedBaseContractsFromBase.map(contractId => scopes[contractId].variables || []
        //we need the || [] because contracts with no state variables
        //have variables undefined rather than empty like you'd expect
        )).filter(variable => {
          //...except, HACK, let's filter out those constants we don't know
          //how to read.  they'll just clutter things up.
          debug("variable %O", variable);
          let definition = inlined[variable.id].definition;
          return !definition.constant || DecodeUtils.Definition.isSimpleConstant(definition.value);
        });

        return { [id]: newScope };
      }))),

      /*
       * data.info.scopes.raw
       */
      raw: (0, _reselectTree.createLeaf)(["/state"], state => state.info.scopes.byId)
    },

    /*
     * data.info.allocations
     */
    allocations: {
      /*
       * data.info.allocations.storage
       */
      storage: (0, _reselectTree.createLeaf)(["/state"], state => state.info.allocations.storage),

      /*
       * data.info.allocations.memory
       */
      memory: (0, _reselectTree.createLeaf)(["/state"], state => state.info.allocations.memory),

      /*
       * data.info.allocations.calldata
       */
      calldata: (0, _reselectTree.createLeaf)(["/state"], state => state.info.allocations.calldata)
    },

    /**
     * data.info.userDefinedTypes
     */
    userDefinedTypes: (0, _reselectTree.createLeaf)(["/state"], state => state.info.userDefinedTypes)
  },

  /**
   * data.proc
   */
  proc: {
    /**
     * data.proc.assignments
     */
    assignments: (0, _reselectTree.createLeaf)(["/state"], state => state.proc.assignments
    //note: this no longer fetches just the byId, but rather the whole
    //assignments object
    ),

    /*
     * data.proc.mappedPaths
     */
    mappedPaths: (0, _reselectTree.createLeaf)(["/state"], state => state.proc.mappedPaths),

    /**
     * data.proc.decodingKeys
     *
     * number of keys that are still decoding
     */
    decodingKeys: (0, _reselectTree.createLeaf)(["./mappedPaths"], mappedPaths => mappedPaths.decodingStarted)
  },

  /**
   * data.current
   */
  current: {
    /**
     * data.current.state
     */
    state: {
      /**
       * data.current.state.stack
       */
      stack: (0, _reselectTree.createLeaf)([_selectors2.default.current.state.stack], words => (words || []).map(word => DecodeUtils.Conversion.toBytes(word))),

      /**
       * data.current.state.memory
       */
      memory: (0, _reselectTree.createLeaf)([_selectors2.default.current.state.memory], words => DecodeUtils.Conversion.toBytes(words.join(""))),

      /**
       * data.current.state.calldata
       */
      calldata: (0, _reselectTree.createLeaf)([_selectors2.default.current.call], ({ data }) => DecodeUtils.Conversion.toBytes(data)),

      /**
       * data.current.state.storage
       */
      storage: (0, _reselectTree.createLeaf)([_selectors2.default.current.codex.storage], mapping => (0, _assign2.default)({}, ...(0, _entries2.default)(mapping).map(([address, word]) => ({
        [`0x${address}`]: DecodeUtils.Conversion.toBytes(word)
      })))),

      /*
       * data.current.state.specials
       * I've named these after the solidity variables they correspond to,
       * which are *mostly* the same as the corresponding EVM opcodes
       * (FWIW: this = ADDRESS, sender = CALLER, value = CALLVALUE)
       */
      specials: (0, _reselectTree.createLeaf)(["/current/address", _selectors2.default.current.call, _selectors2.default.transaction.globals], (address, { sender, value }, { tx, block }) => (0, _extends3.default)({
        this: DecodeUtils.Conversion.toBytes(address),

        sender: DecodeUtils.Conversion.toBytes(sender),

        value: DecodeUtils.Conversion.toBytes(value)

      }, (0, _assign2.default)({}, ...(0, _entries2.default)(tx).map(([variable, value]) => ({
        [variable]: DecodeUtils.Conversion.toBytes(value)
      }))), (0, _assign2.default)({}, ...(0, _entries2.default)(block).map(([variable, value]) => ({
        [variable]: DecodeUtils.Conversion.toBytes(value)
      })))))
    },

    /**
     * data.current.node
     */
    node: (0, _reselectTree.createLeaf)([_selectors4.default.current.node], identity),

    /**
     * data.current.scope
     * old alias for data.current.node (deprecated)
     */
    scope: (0, _reselectTree.createLeaf)(["./node"], identity),

    /*
     * data.current.contract
     * warning: may return null or similar, even though SourceUnit is included
     * as fallback
     */
    contract: (0, _reselectTree.createLeaf)(["./node", "/views/scopes/inlined"], (node, scopes) => {
      const types = ["ContractDefinition", "SourceUnit"];
      //SourceUnit included as fallback
      return findAncestorOfType(node, types, scopes);
    }),

    /**
     * data.current.functionDepth
     */

    functionDepth: (0, _reselectTree.createLeaf)([_selectors4.default.current.functionDepth], identity),

    /**
     * data.current.address
     * NOTE: this is the STORAGE address for the current call, not the CODE
     * address
     */

    address: (0, _reselectTree.createLeaf)([_selectors2.default.current.call], call => call.storageAddress),

    /*
     * data.current.functionsByProgramCounter
     */
    functionsByProgramCounter: (0, _reselectTree.createLeaf)([_selectors4.default.current.functionsByProgramCounter], functions => functions),

    /*
     * data.current.context
     */
    context: (0, _reselectTree.createLeaf)([_selectors2.default.current.context], debuggerContextToDecoderContext),

    /*
     * data.current.aboutToModify
     * HACK
     * This selector is used to catch those times when we go straight from a
     * modifier invocation into the modifier itself, skipping over the
     * definition node (this includes base constructor calls).  So it should
     * return true when:
     * 1. we're on the node corresponding to an argument to a modifier
     * invocation or base constructor call, or, if said argument is a type
     * conversion, its argument (or nested argument)
     * 2. the next node is not a FunctionDefinition, ModifierDefinition, or
     * in the same modifier / base constructor invocation
     */
    aboutToModify: (0, _reselectTree.createLeaf)(["./node", "./modifierInvocation", "./modifierArgumentIndex", "/next/node", "/next/modifierInvocation", _selectors2.default.current.step.isContextChange], (node, invocation, index, next, nextInvocation, isContextChange) => {
      //ensure: current instruction is not a context change (because if it is
      //we cannot rely on the data.next selectors, but also if it is we know
      //we're not about to call a modifier or base constructor!)
      //we also want to return false if we can't find things for whatever
      //reason
      if (isContextChange || !node || !next || !invocation || !nextInvocation) {
        return false;
      }

      //ensure: current position is in a ModifierInvocation or
      //InheritanceSpecifier (recall that SourceUnit was included as
      //fallback)
      if (invocation.nodeType === "SourceUnit") {
        return false;
      }

      //ensure: next node is not a function definition or modifier definition
      if (next.nodeType === "FunctionDefinition" || next.nodeType === "ModifierDefinition") {
        return false;
      }

      //ensure: next node is not in the same invocation
      if (nextInvocation.nodeType !== "SourceUnit" && nextInvocation.id === invocation.id) {
        return false;
      }

      //now: are we on the node corresponding to an argument, or, if
      //it's a type conversion, its nested argument?
      if (index === undefined) {
        return false;
      }
      let argument = invocation.arguments[index];
      while (argument.kind === "typeConversion") {
        if (node.id === argument.id) {
          return true;
        }
        argument = argument.arguments[0];
      }
      return node.id === argument.id;
    }),

    /*
     * data.current.modifierInvocation
     */
    modifierInvocation: (0, _reselectTree.createLeaf)(["./node", "/views/scopes/inlined"], (node, scopes) => {
      const types = ["ModifierInvocation", "InheritanceSpecifier", "SourceUnit"];
      //again, SourceUnit included as fallback
      return findAncestorOfType(node, types, scopes);
    }),

    /**
     * data.current.modifierArgumentIndex
     * gets the index of the current modifier argument that you're in
     * (undefined when not in a modifier argument)
     */
    modifierArgumentIndex: (0, _reselectTree.createLeaf)(["/info/scopes", "./node", "./modifierInvocation"], (scopes, node, invocation) => {
      if (invocation.nodeType === "SourceUnit") {
        return undefined;
      }

      let pointer = scopes[node.id].pointer;
      let invocationPointer = scopes[invocation.id].pointer;

      //slice the invocation pointer off the beginning
      let difference = pointer.replace(invocationPointer, "");
      debug("difference %s", difference);
      let rawIndex = difference.match(/^\/arguments\/(\d+)/);
      //note that that \d+ is greedy
      debug("rawIndex %o", rawIndex);
      if (rawIndex === null) {
        return undefined;
      }
      return parseInt(rawIndex[1]);
    }),

    /*
     * data.current.modifierBeingInvoked
     * gets the node corresponding to the modifier or base constructor
     * being invoked
     */
    modifierBeingInvoked: (0, _reselectTree.createLeaf)(["./modifierInvocation", "/views/scopes/inlined"], (invocation, scopes) => {
      if (!invocation || invocation.nodeType === "SourceUnit") {
        return undefined;
      }

      return modifierForInvocation(invocation, scopes);
    }),

    /**
     * data.current.identifiers (namespace)
     */
    identifiers: {
      /**
       * data.current.identifiers (selector)
       *
       * returns identifers and corresponding definition node ID or builtin name
       * (object entries look like [name]: {astId: id} or like [name]: {builtin: name}
       */
      _: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "/current/node"], (scopes, scope) => {
        let variables = {};
        if (scope !== undefined) {
          let cur = scope.id;

          do {
            variables = (0, _assign2.default)(variables, ...(scopes[cur].variables || []).filter(v => v.name !== "") //exclude anonymous output params
            .filter(v => variables[v.name] == undefined).map(v => ({ [v.name]: { astId: v.id } })));

            cur = scopes[cur].parentId;
          } while (cur != null);
        }

        let builtins = {
          msg: { builtin: "msg" },
          tx: { builtin: "tx" },
          block: { builtin: "block" },
          this: { builtin: "this" },
          now: { builtin: "now" }
        };

        return (0, _extends3.default)({}, variables, builtins);
      }),

      /**
       * data.current.identifiers.definitions (namespace)
       */
      definitions: {
        /* data.current.identifiers.definitions (selector)
         * definitions for current variables, by identifier
         */
        _: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "../_", "./this"], (scopes, identifiers, thisDefinition) => {
          let variables = (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, { astId }]) => {
            if (astId !== undefined) {
              //will be undefined for builtins
              let { definition } = scopes[astId];
              return { [identifier]: definition };
            } else {
              return {}; //skip over builtins; we'll handle those separately
            }
          }));
          let builtins = {
            msg: DecodeUtils.Definition.MSG_DEFINITION,
            tx: DecodeUtils.Definition.TX_DEFINITION,
            block: DecodeUtils.Definition.BLOCK_DEFINITION,
            now: DecodeUtils.Definition.spoofUintDefinition("now")
          };
          //only include this when it has a proper definition
          if (thisDefinition) {
            builtins.this = thisDefinition;
          }
          return (0, _extends3.default)({}, variables, builtins);
        }),

        /*
         * data.current.identifiers.definitions.this
         *
         * returns a spoofed definition for the this variable
         */
        this: (0, _reselectTree.createLeaf)(["/current/contract"], contractNode => contractNode && contractNode.nodeType === "ContractDefinition" ? DecodeUtils.Definition.spoofThisDefinition(contractNode.name, contractNode.id) : null)
      },

      /**
       * data.current.identifiers.refs
       *
       * current variables' value refs
       */
      refs: (0, _reselectTree.createLeaf)(["/proc/assignments", "./_", "/current/functionDepth", //for pruning things too deep on stack
      "/current/address" //for contract variables
      ], (assignments, identifiers, currentDepth, address) => (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, { astId, builtin }]) => {
        let id;

        //is this an ordinary variable or a builtin?
        if (astId !== undefined) {
          //if not a builtin, first check if it's a contract var
          let matchIds = (assignments.byAstId[astId] || []).filter(idHash => assignments.byId[idHash].address === address);
          if (matchIds.length > 0) {
            id = matchIds[0]; //there should only be one!
          }

          //if not contract, it's local, so find the innermost
          //(but not beyond current depth)
          if (id === undefined) {
            let matchFrames = (assignments.byAstId[astId] || []).map(id => assignments.byId[id].stackframe).filter(stackframe => stackframe !== undefined);

            if (matchFrames.length > 0) {
              //this check isn't *really*
              //necessary, but may as well prevent stupid stuff
              let maxMatch = Math.min(currentDepth, Math.max(...matchFrames));
              id = (0, _helpers.stableKeccak256)({ astId, stackframe: maxMatch });
            }
          }
        } else {
          //otherwise, it's a builtin
          //NOTE: for now we assume there is only one assignment per
          //builtin, but this will change in the future
          id = assignments.byBuiltin[builtin][0];
        }

        //if we still didn't find it, oh well

        let { ref } = assignments.byId[id] || {};
        if (!ref) {
          return undefined;
        }

        return {
          [identifier]: ref
        };
      })))
    }
  },

  /**
   * data.next
   */
  next: {
    /**
     * data.next.state
     * Yes, I'm just repeating the code for data.current.state.stack here;
     * not worth the trouble to factor out
     */
    state: {
      /**
       * data.next.state.stack
       */
      stack: (0, _reselectTree.createLeaf)([_selectors2.default.next.state.stack], words => (words || []).map(word => DecodeUtils.Conversion.toBytes(word)))
    },

    //HACK WARNING
    //the following selectors depend on solidity.next
    //do not use them when the current instruction is a context change!

    /**
     * data.next.node
     */
    node: (0, _reselectTree.createLeaf)([_selectors4.default.next.node], identity),

    /**
     * data.next.modifierInvocation
     * Note: yes, I'm just repeating the code from data.current here but with
     * invalid added
     */
    modifierInvocation: (0, _reselectTree.createLeaf)(["./node", "/views/scopes/inlined", _selectors2.default.current.step.isContextChange], (node, scopes, invalid) => {
      //don't attempt this at a context change!
      //(also don't attempt this if we can't find the node for whatever
      //reason)
      if (invalid || !node) {
        return undefined;
      }
      const types = ["ModifierInvocation", "InheritanceSpecifier", "SourceUnit"];
      //again, SourceUnit included as fallback
      return findAncestorOfType(node, types, scopes);
    }),

    /*
     * data.next.modifierBeingInvoked
     */
    modifierBeingInvoked: (0, _reselectTree.createLeaf)(["./modifierInvocation", "/views/scopes/inlined", _selectors2.default.current.step.isContextChange], (invocation, scopes, invalid) => {
      if (invalid || !invocation || invocation.nodeType === "SourceUnit") {
        return undefined;
      }

      return modifierForInvocation(invocation, scopes);
    })
    //END HACK WARNING
  },

  /**
   * data.nextMapped
   */
  nextMapped: {
    /**
     * data.nextMapped.state
     * Yes, I'm just repeating the code for data.current.state.stack here;
     * not worth the trouble to factor out
     * HACK: this assumes we're not about to change context! don't use this if we
     * are!
     */
    state: {
      /**
       * data.nextMapped.state.stack
       */
      stack: (0, _reselectTree.createLeaf)([_selectors4.default.current.nextMapped], step => ((step || {}).stack || []).map(word => DecodeUtils.Conversion.toBytes(word)))
    }
  }
});

exports.default = data;

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("json-pointer");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addContext = addContext;
exports.normalizeContexts = normalizeContexts;
exports.addInstance = addInstance;
exports.begin = begin;
exports.callstackAndCodexSaga = callstackAndCodexSaga;
exports.reset = reset;
exports.unload = unload;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(5);

var _helpers = __webpack_require__(1);

var _actions = __webpack_require__(12);

var _actions2 = __webpack_require__(29);

var actions = _interopRequireWildcard(_actions2);

var _selectors = __webpack_require__(9);

var _selectors2 = _interopRequireDefault(_selectors);

var _sagas = __webpack_require__(13);

var trace = _interopRequireWildcard(_sagas);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:evm:sagas");

/**
 * Adds EVM bytecode context
 *
 * @return {string} ID (0x-prefixed keccak of binary)
 */
function* addContext(context) {
  const contextHash = (0, _helpers.keccak256)({ type: "string", value: context.binary });
  //NOTE: we take hash as *string*, not as bytes, because the binary may
  //contain link references!

  debug("context %O", context);
  yield (0, _effects.put)(actions.addContext(context));

  return contextHash;
}

function* normalizeContexts() {
  yield (0, _effects.put)(actions.normalizeContexts());
}

/**
 * Adds known deployed instance of binary at address
 *
 * @param {string} binary - may be undefined (e.g. precompiles)
 * @return {string} ID (0x-prefixed keccak of binary)
 */
function* addInstance(address, binary) {
  let search = yield (0, _effects.select)(_selectors2.default.info.binaries.search);
  let context = search(binary);

  //now, whether we needed a new context or not, add the instance
  yield (0, _effects.put)(actions.addInstance(address, context, binary));

  return context;
}

function* begin({
  address,
  binary,
  data,
  storageAddress,
  status,
  sender,
  value,
  gasprice,
  block
}) {
  yield (0, _effects.put)(actions.saveGlobals(sender, gasprice, block));
  yield (0, _effects.put)(actions.saveStatus(status));
  debug("codex: %O", (yield (0, _effects.select)(_selectors2.default.current.codex)));
  if (address) {
    yield (0, _effects.put)(actions.call(address, data, storageAddress, sender, value));
  } else {
    yield (0, _effects.put)(actions.create(binary, storageAddress, sender, value));
  }
}

function* tickSaga() {
  debug("got TICK");

  yield* callstackAndCodexSaga();
  yield* trace.signalTickSagaCompletion();
}

function* callstackAndCodexSaga() {
  if (yield (0, _effects.select)(_selectors2.default.current.step.isExceptionalHalting)) {
    //let's handle this case first so we can be sure everything else is *not*
    //an exceptional halt
    debug("exceptional halt!");

    yield (0, _effects.put)(actions.fail());
  } else if (yield (0, _effects.select)(_selectors2.default.current.step.isCall)) {
    debug("got call");
    // if there is no binary (e.g. in the case of precompiled contracts or
    // externally owned accounts), then there will be no trace steps for the
    // called code, and so we shouldn't tell the debugger that we're entering
    // another execution context
    if (yield (0, _effects.select)(_selectors2.default.current.step.callsPrecompileOrExternal)) {
      return;
    }

    let address = yield (0, _effects.select)(_selectors2.default.current.step.callAddress);
    let data = yield (0, _effects.select)(_selectors2.default.current.step.callData);

    debug("calling address %s", address);

    if (yield (0, _effects.select)(_selectors2.default.current.step.isDelegateCallStrict)) {
      //if delegating, leave storageAddress, sender, and value the same
      let { storageAddress, sender, value } = yield (0, _effects.select)(_selectors2.default.current.call);
      yield (0, _effects.put)(actions.call(address, data, storageAddress, sender, value));
    } else {
      //this branch covers CALL, CALLCODE, and STATICCALL
      let currentCall = yield (0, _effects.select)(_selectors2.default.current.call);
      let storageAddress = (yield (0, _effects.select)(_selectors2.default.current.step.isDelegateCallBroad)) ? currentCall.storageAddress //for CALLCODE
      : address;
      let sender = currentCall.storageAddress; //not the code address!
      let value = yield (0, _effects.select)(_selectors2.default.current.step.callValue); //0 if static
      yield (0, _effects.put)(actions.call(address, data, storageAddress, sender, value));
    }
  } else if (yield (0, _effects.select)(_selectors2.default.current.step.isCreate)) {
    debug("got create");
    let binary = yield (0, _effects.select)(_selectors2.default.current.step.createBinary);
    let createdAddress = yield (0, _effects.select)(_selectors2.default.current.step.createdAddress);
    let value = yield (0, _effects.select)(_selectors2.default.current.step.createValue);
    let sender = (yield (0, _effects.select)(_selectors2.default.current.call)).storageAddress;
    //not the code address!

    yield (0, _effects.put)(actions.create(binary, createdAddress, sender, value));
    //as above, storageAddress handles when calling from a creation call
  } else if (yield (0, _effects.select)(_selectors2.default.current.step.isHalting)) {
    debug("got return");

    let { binary, storageAddress } = yield (0, _effects.select)(_selectors2.default.current.call);

    if (binary) {
      //if we're returning from a successful creation call, let's log the
      //result
      let returnedBinary = yield (0, _effects.select)(_selectors2.default.current.step.returnValue);
      let search = yield (0, _effects.select)(_selectors2.default.info.binaries.search);
      let returnedContext = search(returnedBinary);
      yield (0, _effects.put)(actions.returnCreate(storageAddress, returnedBinary, returnedContext));
    } else {
      yield (0, _effects.put)(actions.returnCall());
    }
  } else if (yield (0, _effects.select)(_selectors2.default.current.step.touchesStorage)) {
    let storageAddress = (yield (0, _effects.select)(_selectors2.default.current.call)).storageAddress;
    let slot = yield (0, _effects.select)(_selectors2.default.current.step.storageAffected);
    //note we get next storage, since we're updating to that
    let storage = yield (0, _effects.select)(_selectors2.default.next.state.storage);
    //normally we'd need a 0 fallback for this next line, but in this case we
    //can be sure the value will be there, since we're touching that storage
    if (yield (0, _effects.select)(_selectors2.default.current.step.isStore)) {
      yield (0, _effects.put)(actions.store(storageAddress, slot, storage[slot]));
    } else {
      //otherwise, it's a load
      yield (0, _effects.put)(actions.load(storageAddress, slot, storage[slot]));
    }
  }
}

function* reset() {
  let initialCall = yield (0, _effects.select)(_selectors2.default.transaction.initialCall);
  yield (0, _effects.put)(actions.reset());
  yield (0, _effects.put)(initialCall);
}

function* unload() {
  yield (0, _effects.put)(actions.unloadTransaction());
}

function* saga() {
  yield (0, _effects.takeEvery)(_actions.TICK, tickSaga);
}

exports.default = (0, _helpers.prefixName)("evm", saga);

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(2);

var _extends3 = _interopRequireDefault(_extends2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(3);

var _selectors = __webpack_require__(9);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(11);

var _selectors4 = _interopRequireDefault(_selectors3);

var _selectors5 = __webpack_require__(10);

var _selectors6 = _interopRequireDefault(_selectors5);

var _map = __webpack_require__(25);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:controller:selectors"); //eslint-disable-line no-unused-vars

/**
 * @private
 */
const identity = x => x;

/**
 * controller
 */
const controller = (0, _reselectTree.createSelectorTree)({
  /**
   * controller.state
   */
  state: state => state.controller,
  /**
   * controller.current
   */
  current: {
    /**
     * controller.current.functionDepth
     */
    functionDepth: (0, _reselectTree.createLeaf)([_selectors4.default.current.functionDepth], identity),

    /**
     * controller.current.executionContext
     */
    executionContext: (0, _reselectTree.createLeaf)([_selectors2.default.current.call], identity),

    /**
     * controller.current.willJump
     */
    willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], identity),

    /**
     * controller.current.location
     */
    location: {
      /**
       * controller.current.location.sourceRange
       */
      sourceRange: (0, _reselectTree.createLeaf)([_selectors4.default.current.sourceRange, "/current/trace/loaded"], (range, loaded) => loaded ? range : null),

      /**
       * controller.current.location.source
       */
      source: (0, _reselectTree.createLeaf)([_selectors4.default.current.source, "/current/trace/loaded"], (source, loaded) => loaded ? source : null),

      /**
       * controller.current.location.node
       */
      node: (0, _reselectTree.createLeaf)([_selectors4.default.current.node, "/current/trace/loaded"], (node, loaded) => loaded ? node : null),

      /**
       * controller.current.location.isMultiline
       */
      isMultiline: (0, _reselectTree.createLeaf)([_selectors4.default.current.isMultiline, "/current/trace/loaded"], (raw, loaded) => loaded ? raw : false)
    },

    /*
     * controller.current.trace
     */
    trace: {
      /**
       * controller.current.trace.finished
       */
      finished: (0, _reselectTree.createLeaf)([_selectors6.default.finished], identity),

      /**
       * controller.current.trace.loaded
       */
      loaded: (0, _reselectTree.createLeaf)([_selectors6.default.loaded], identity)
    }
  },

  /**
   * controller.breakpoints (namespace)
   */
  breakpoints: {
    /**
     * controller.breakpoints (selector)
     */
    _: (0, _reselectTree.createLeaf)(["/state"], state => state.breakpoints),

    /**
     * controller.breakpoints.resolver (selector)
     * this selector returns a function that adjusts a given line-based
     * breakpoint (on node-based breakpoints it simply returns the input) by
     * repeatedly moving it down a line until it lands on a line where there's
     * actually somewhere to break.  if no such line exists beyond that point, it
     * returns null instead.
     */
    resolver: (0, _reselectTree.createLeaf)([_selectors4.default.info.sources], sources => breakpoint => {
      let adjustedBreakpoint;
      if (breakpoint.node === undefined) {
        let line = breakpoint.line;
        let { source, ast } = sources[breakpoint.sourceId];
        let lineLengths = source.split("\n").map(line => line.length);
        //why does neither JS nor lodash have a scan function like Haskell??
        //guess we'll have to do our scan manually
        let lineStarts = [0];
        for (let length of lineLengths) {
          lineStarts.push(lineStarts[lineStarts.length - 1] + length + 1);
          //+1 for the /n itself
        }
        debug("line: %s", source.slice(lineStarts[line], lineStarts[line] + lineLengths[line]));
        while (line < lineLengths.length && !(0, _map.anyNonSkippedInRange)(ast, lineStarts[line], lineLengths[line])) {
          debug("incrementing");
          line++;
        }
        if (line >= lineLengths.length) {
          adjustedBreakpoint = null;
        } else {
          adjustedBreakpoint = (0, _extends3.default)({}, breakpoint, { line });
        }
      } else {
        debug("node-based breakpoint");
        adjustedBreakpoint = breakpoint;
      }
      return adjustedBreakpoint;
    })
  },

  /**
   * controller.finished
   * deprecated alias for controller.current.trace.finished
   */
  finished: (0, _reselectTree.createLeaf)(["/current/finished"], finished => finished),

  /**
   * controller.isStepping
   */
  isStepping: (0, _reselectTree.createLeaf)(["./state"], state => state.isStepping)
});

exports.default = controller;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = __webpack_require__(16);

var _keys2 = _interopRequireDefault(_keys);

exports.getRange = getRange;
exports.rangeNodes = rangeNodes;
exports.findOverlappingRange = findOverlappingRange;
exports.findRange = findRange;
exports.anyNonSkippedInRange = anyNonSkippedInRange;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _nodeIntervalTree = __webpack_require__(53);

var _nodeIntervalTree2 = _interopRequireDefault(_nodeIntervalTree);

var _jsonPointer = __webpack_require__(22);

var _jsonPointer2 = _interopRequireDefault(_jsonPointer);

var _helpers = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:ast:map");

/**
 * @private
 */
function getRange(node) {
  // src: "<start>:<length>:<_>"
  // returns [start, end]
  let [start, length] = node.src.split(":").slice(0, 2).map(i => parseInt(i));

  return [start, start + length];
}

/**
 * @private
 */
function rangeNodes(node, pointer = "") {
  if (node instanceof Array) {
    return [].concat(...node.map((sub, i) => rangeNodes(sub, `${pointer}/${i}`)));
  } else if (node instanceof Object) {
    let results = [];

    if (node.src !== undefined && node.id !== undefined) {
      //there are some "pseudo-nodes" with a src but no id.
      //these will cause problems, so we want to exclude them.
      //(to my knowledge this only happens with the externalReferences
      //to an InlineAssembly node, so excluding them just means we find
      //the InlineAssembly node instead, which is fine)
      results.push({ pointer, range: getRange(node) });
    }

    return results.concat(...(0, _keys2.default)(node).map(key => rangeNodes(node[key], `${pointer}/${key}`)));
  } else {
    return [];
  }
}

/**
 * @private
 */
function findOverlappingRange(node, sourceStart, sourceLength) {
  let ranges = rangeNodes(node);
  let tree = new _nodeIntervalTree2.default();

  for (let _ref of ranges) {
    let { range, pointer } = _ref;

    let [start, end] = range;
    tree.insert(start, end, { range, pointer });
  }

  let sourceEnd = sourceStart + sourceLength;

  return tree.search(sourceStart, sourceEnd);
  //returns everything overlapping the given range
}

/**
 * @private
 */
function findRange(node, sourceStart, sourceLength) {
  // find nodes that fully contain requested range,
  // return longest pointer
  let sourceEnd = sourceStart + sourceLength;
  return findOverlappingRange(node, sourceStart, sourceLength).filter(({ range }) => sourceStart >= range[0] && sourceEnd <= range[1]).map(({ pointer }) => pointer).reduce((a, b) => a.length > b.length ? a : b, "");
}

/**
 * @private
 */
function anyNonSkippedInRange(node, sourceStart, sourceLength) {
  let sourceEnd = sourceStart + sourceLength;
  return findOverlappingRange(node, sourceStart, sourceLength).some(({ range, pointer }) => sourceStart <= range[0] && //we want to go by starting line
  range[0] < sourceEnd && !(0, _helpers.isSkippedNodeType)(_jsonPointer2.default.get(node, pointer))
  //NOTE: this doesn't actually catch everything skipped!  But doing better
  //is hard
  );
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(6);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(8);

var _assign2 = _interopRequireDefault(_assign);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(3);

var _selectors = __webpack_require__(9);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(10);

var _selectors4 = _interopRequireDefault(_selectors3);

var _selectors5 = __webpack_require__(11);

var _selectors6 = _interopRequireDefault(_selectors5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:session:selectors");

const session = (0, _reselectTree.createSelectorTree)({
  /*
   * session.state
   */
  state: state => state.session,

  /**
   * session.info
   */
  info: {
    /**
     * session.info.affectedInstances
     */
    affectedInstances: (0, _reselectTree.createLeaf)([_selectors2.default.current.codex.instances, _selectors2.default.info.contexts, _selectors6.default.info.sources], (instances, contexts, sources) => (0, _assign2.default)({}, ...(0, _entries2.default)(instances).map(([address, { context: contextId, binary }]) => {
      debug("instances %O", instances);
      debug("contexts %O", contexts);
      let context = contexts[contextId];
      if (!context) {
        return { [address]: { binary } };
      }
      let { contractName, primarySource } = context;

      let source = primarySource !== undefined ? sources[primarySource] : undefined;

      return {
        [address]: {
          contractName,
          source,
          binary
        }
      };
    })))
  },

  /**
   * session.transaction (namespace)
   */
  transaction: {
    /**
     * session.transaction (selector)
     * contains the web3 transaction object
     */
    _: (0, _reselectTree.createLeaf)(["/state"], state => state.transaction),

    /**
     * session.transaction.receipt
     * contains the web3 receipt object
     */
    receipt: (0, _reselectTree.createLeaf)(["/state"], state => state.receipt),

    /**
     * session.transaction.block
     * contains the web3 block object
     */
    block: (0, _reselectTree.createLeaf)(["/state"], state => state.block)
  },

  /*
   * session.status (namespace)
   */
  status: {
    /*
     * session.status.readyOrError
     */
    readyOrError: (0, _reselectTree.createLeaf)(["/state"], state => state.ready),

    /*
     * session.status.ready
     */
    ready: (0, _reselectTree.createLeaf)(["./readyOrError", "./isError"], (readyOrError, error) => readyOrError && !error),

    /*
     * session.status.waiting
     */
    waiting: (0, _reselectTree.createLeaf)(["/state"], state => !state.ready),

    /*
     * session.status.error
     */
    error: (0, _reselectTree.createLeaf)(["/state"], state => state.lastLoadingError),

    /*
     * session.status.isError
     */
    isError: (0, _reselectTree.createLeaf)(["./error"], error => error !== null),

    /*
     * session.status.success
     */
    success: (0, _reselectTree.createLeaf)(["./error"], error => error === null),

    /*
     * session.status.errored
     */
    errored: (0, _reselectTree.createLeaf)(["./readyOrError", "./isError"], (readyOrError, error) => readyOrError && error),

    /*
     * session.status.loaded
     */
    loaded: (0, _reselectTree.createLeaf)([_selectors4.default.loaded], loaded => loaded),

    /*
     * session.status.projectInfoComputed
     */
    projectInfoComputed: (0, _reselectTree.createLeaf)(["/state"], state => state.projectInfoComputed)
  }
});

exports.default = session;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scope = scope;
exports.declare = declare;
exports.assign = assign;
exports.mapPathAndAssign = mapPathAndAssign;
exports.reset = reset;
exports.defineType = defineType;
exports.allocate = allocate;
const SCOPE = exports.SCOPE = "SCOPE";
function scope(id, pointer, parentId, sourceId) {
  return {
    type: SCOPE,
    id,
    pointer,
    parentId,
    sourceId
  };
}

const DECLARE = exports.DECLARE = "DECLARE_VARIABLE";
function declare(node) {
  return {
    type: DECLARE,
    node
  };
}

const ASSIGN = exports.ASSIGN = "ASSIGN";
function assign(assignments) {
  return {
    type: ASSIGN,
    assignments
  };
}

const MAP_PATH_AND_ASSIGN = exports.MAP_PATH_AND_ASSIGN = "MAP_PATH_AND_ASSIGN";
function mapPathAndAssign(address, slot, assignments, typeIdentifier, parentType) {
  return {
    type: MAP_PATH_AND_ASSIGN,
    address,
    slot,
    assignments,
    typeIdentifier,
    parentType
  };
}

const RESET = exports.RESET = "DATA_RESET";
function reset() {
  return { type: RESET };
}

const DEFINE_TYPE = exports.DEFINE_TYPE = "DEFINE_TYPE";
function defineType(node) {
  return {
    type: DEFINE_TYPE,
    node
  };
}

const ALLOCATE = exports.ALLOCATE = "ALLOCATE";
function allocate(storage, memory, calldata) {
  return {
    type: ALLOCATE,
    storage,
    memory,
    calldata
  };
}

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/set");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addContext = addContext;
exports.normalizeContexts = normalizeContexts;
exports.addInstance = addInstance;
exports.saveGlobals = saveGlobals;
exports.saveStatus = saveStatus;
exports.call = call;
exports.create = create;
exports.returnCall = returnCall;
exports.returnCreate = returnCreate;
exports.fail = fail;
exports.store = store;
exports.load = load;
exports.reset = reset;
exports.unloadTransaction = unloadTransaction;
const ADD_CONTEXT = exports.ADD_CONTEXT = "EVM_ADD_CONTEXT";
function addContext({
  contractName,
  binary,
  sourceMap,
  compiler,
  abi,
  contractId,
  contractKind,
  isConstructor
}) {
  return {
    type: ADD_CONTEXT,
    contractName,
    binary,
    sourceMap,
    compiler,
    abi,
    contractId,
    contractKind,
    isConstructor
  };
}

const NORMALIZE_CONTEXTS = exports.NORMALIZE_CONTEXTS = "EVM_NORMALIZE_CONTEXTS";
function normalizeContexts() {
  return { type: NORMALIZE_CONTEXTS };
}

const ADD_INSTANCE = exports.ADD_INSTANCE = "EVM_ADD_INSTANCE";
function addInstance(address, context, binary) {
  return {
    type: ADD_INSTANCE,
    address,
    context,
    binary
  };
}

const SAVE_GLOBALS = exports.SAVE_GLOBALS = "SAVE_GLOBALS";
function saveGlobals(origin, gasprice, block) {
  return {
    type: SAVE_GLOBALS,
    origin,
    gasprice,
    block
  };
}

const SAVE_STATUS = exports.SAVE_STATUS = "SAVE_STATUS";
function saveStatus(status) {
  return {
    type: SAVE_STATUS,
    status
  };
}

const CALL = exports.CALL = "CALL";
function call(address, data, storageAddress, sender, value) {
  return {
    type: CALL,
    address,
    data,
    storageAddress,
    sender,
    value
  };
}

const CREATE = exports.CREATE = "CREATE";
function create(binary, storageAddress, sender, value) {
  return {
    type: CREATE,
    binary,
    storageAddress,
    sender,
    value
  };
}

const RETURN_CALL = exports.RETURN_CALL = "RETURN_CALL";
function returnCall() {
  return {
    type: RETURN_CALL
  };
}

const RETURN_CREATE = exports.RETURN_CREATE = "RETURN_CREATE";
function returnCreate(address, code, context) {
  return {
    type: RETURN_CREATE,
    address,
    code,
    context
  };
}

const FAIL = exports.FAIL = "FAIL";
function fail() {
  return {
    type: FAIL
  };
}

const STORE = exports.STORE = "STORE";
function store(address, slot, value) {
  return {
    type: STORE,
    address,
    slot,
    value
  };
}

const LOAD = exports.LOAD = "LOAD";
function load(address, slot, value) {
  return {
    type: LOAD,
    address,
    slot,
    value
  };
}

const RESET = exports.RESET = "EVM_RESET";
function reset(storageAddress) {
  return {
    type: RESET,
    storageAddress
  };
}

const UNLOAD_TRANSACTION = exports.UNLOAD_TRANSACTION = "EVM_UNLOAD_TRANSACTION";
function unloadTransaction() {
  return {
    type: UNLOAD_TRANSACTION
  };
}

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inspectTransaction = inspectTransaction;
exports.obtainBinaries = obtainBinaries;
exports.init = init;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(5);

var _helpers = __webpack_require__(1);

var _actions = __webpack_require__(55);

var actions = _interopRequireWildcard(_actions);

var _actions2 = __webpack_require__(14);

var session = _interopRequireWildcard(_actions2);

var _bn = __webpack_require__(15);

var _bn2 = _interopRequireDefault(_bn);

var _web = __webpack_require__(31);

var _web2 = _interopRequireDefault(_web);

var _truffleDecodeUtils = __webpack_require__(4);

var DecodeUtils = _interopRequireWildcard(_truffleDecodeUtils);

var _adapter = __webpack_require__(56);

var _adapter2 = _interopRequireDefault(_adapter);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:web3:sagas"); //just for utils!


function* fetchTransactionInfo(adapter, { txHash }) {
  debug("inspecting transaction");
  var trace;
  try {
    trace = yield (0, _effects.apply)(adapter, adapter.getTrace, [txHash]);
  } catch (e) {
    debug("putting error");
    yield (0, _effects.put)(actions.error(e));
    return;
  }

  debug("got trace");
  yield (0, _effects.put)(actions.receiveTrace(trace));

  let tx = yield (0, _effects.apply)(adapter, adapter.getTransaction, [txHash]);
  debug("tx %O", tx);
  let receipt = yield (0, _effects.apply)(adapter, adapter.getReceipt, [txHash]);
  debug("receipt %O", receipt);
  let block = yield (0, _effects.apply)(adapter, adapter.getBlock, [tx.blockNumber]);
  debug("block %O", block);

  yield (0, _effects.put)(session.saveTransaction(tx));
  yield (0, _effects.put)(session.saveReceipt(receipt));
  yield (0, _effects.put)(session.saveBlock(block));

  //these ones get grouped together for convenience
  let solidityBlock = {
    coinbase: block.miner,
    difficulty: new _bn2.default(block.difficulty),
    gaslimit: new _bn2.default(block.gasLimit),
    number: new _bn2.default(block.number),
    timestamp: new _bn2.default(block.timestamp)
  };

  if (tx.to != null) {
    yield (0, _effects.put)(actions.receiveCall({
      address: tx.to,
      data: tx.input,
      storageAddress: tx.to,
      status: receipt.status,
      sender: tx.from,
      value: new _bn2.default(tx.value),
      gasprice: new _bn2.default(tx.gasPrice),
      block: solidityBlock
    }));
  } else {
    let storageAddress = _web2.default.utils.isAddress(receipt.contractAddress) ? receipt.contractAddress : DecodeUtils.EVM.ZERO_ADDRESS;
    yield (0, _effects.put)(actions.receiveCall({
      binary: tx.input,
      storageAddress,
      status: receipt.status,
      sender: tx.from,
      value: new _bn2.default(tx.value),
      gasprice: new _bn2.default(tx.gasPrice),
      block: solidityBlock
    }));
  }
}

function* fetchBinary(adapter, { address, block }) {
  debug("fetching binary for %s", address);
  let binary = yield (0, _effects.apply)(adapter, adapter.getDeployedCode, [address, block]);

  debug("received binary for %s", address);
  yield (0, _effects.put)(actions.receiveBinary(address, binary));
}

function* inspectTransaction(txHash) {
  yield (0, _effects.put)(actions.inspect(txHash));

  let action = yield (0, _effects.take)([actions.RECEIVE_TRACE, actions.ERROR_WEB3]);
  debug("action %o", action);

  var trace;
  if (action.type == actions.RECEIVE_TRACE) {
    trace = action.trace;
    debug("received trace");
  } else {
    return { error: action.error };
  }

  let {
    address,
    binary,
    data,
    storageAddress,
    status,
    sender,
    value,
    gasprice,
    block
  } = yield (0, _effects.take)(actions.RECEIVE_CALL);
  debug("received call");

  return {
    trace,
    address,
    binary,
    data,
    storageAddress,
    status,
    sender,
    value,
    gasprice,
    block
  };
}

//NOTE: the block argument is optional
function* obtainBinaries(addresses, block) {
  let tasks = yield (0, _effects.all)(addresses.map(address => (0, _effects.fork)(receiveBinary, address)));

  debug("requesting binaries");
  yield (0, _effects.all)(addresses.map(address => (0, _effects.put)(actions.fetchBinary(address, block))));

  let binaries = [];
  binaries = yield (0, _effects.join)(tasks);

  debug("binaries %o", binaries);

  return binaries;
}

function* receiveBinary(address) {
  let { binary } = yield (0, _effects.take)(action => action.type == actions.RECEIVE_BINARY && action.address == address);
  debug("got binary for %s", address);

  return binary;
}

function* init(provider) {
  yield (0, _effects.put)(actions.init(provider));
}

function* saga() {
  // wait for web3 init signal
  let { provider } = yield (0, _effects.take)(actions.INIT_WEB3);
  let adapter = new _adapter2.default(provider);

  yield (0, _effects.takeEvery)(actions.INSPECT, fetchTransactionInfo, adapter);
  yield (0, _effects.takeEvery)(actions.FETCH_BINARY, fetchBinary, adapter);
}

exports.default = (0, _helpers.prefixName)("web3", saga);

/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = require("web3");

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = require("truffle-decoder");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = __webpack_require__(16);

var _keys2 = _interopRequireDefault(_keys);

exports.saga = saga;
exports.reset = reset;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(5);

var _helpers = __webpack_require__(1);

var _sagas = __webpack_require__(13);

var trace = _interopRequireWildcard(_sagas);

var _sagas2 = __webpack_require__(17);

var data = _interopRequireWildcard(_sagas2);

var _sagas3 = __webpack_require__(23);

var evm = _interopRequireWildcard(_sagas3);

var _sagas4 = __webpack_require__(34);

var solidity = _interopRequireWildcard(_sagas4);

var _actions = __webpack_require__(20);

var actions = _interopRequireWildcard(_actions);

var _selectors = __webpack_require__(24);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:controller:sagas");

const STEP_SAGAS = {
  [actions.ADVANCE]: advance,
  [actions.STEP_NEXT]: stepNext,
  [actions.STEP_OVER]: stepOver,
  [actions.STEP_INTO]: stepInto,
  [actions.STEP_OUT]: stepOut,
  [actions.CONTINUE]: continueUntilBreakpoint
};

function* saga() {
  while (true) {
    debug("waiting for control action");
    let action = yield (0, _effects.take)((0, _keys2.default)(STEP_SAGAS));
    if (!(yield (0, _effects.select)(_selectors2.default.current.trace.loaded))) {
      continue; //while no trace is loaded, step actions are ignored
    }
    debug("got control action");
    let saga = STEP_SAGAS[action.type];

    yield (0, _effects.put)(actions.startStepping());
    yield (0, _effects.race)({
      exec: (0, _effects.call)(saga, action), //not all will use this
      interrupt: (0, _effects.take)(actions.INTERRUPT)
    });
    yield (0, _effects.put)(actions.doneStepping());
  }
}

exports.default = (0, _helpers.prefixName)("controller", saga);

/*
 * Advance the state by the given number of instructions (but not past the end)
 * (if no count given, advance 1)
 */

function* advance(action) {
  let count = action !== undefined && action.count !== undefined ? action.count : 1;
  //default is, as mentioned, to advance 1
  for (let i = 0; i < count && !(yield (0, _effects.select)(_selectors2.default.current.trace.finished)); i++) {
    yield* trace.advance();
  }
}

/**
 * stepNext - step to the next logical code segment
 *
 * Note: It might take multiple instructions to express the same section of code.
 * "Stepping", then, is stepping to the next logical item, not stepping to the next
 * instruction. See advance() if you'd like to advance by one instruction.
 */
function* stepNext() {
  const startingRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);

  var upcoming, finished;

  do {
    // advance at least once step
    yield* advance();

    // and check the next source range
    try {
      upcoming = yield (0, _effects.select)(_selectors2.default.current.location);
    } catch (e) {
      upcoming = null;
    }

    finished = yield (0, _effects.select)(_selectors2.default.current.trace.finished);

    // if the next step's source range is still the same, keep going
  } while (!finished && (!upcoming || !upcoming.node || (0, _helpers.isDeliberatelySkippedNodeType)(upcoming.node) || upcoming.sourceRange.start == startingRange.start && upcoming.sourceRange.length == startingRange.length));
}

/**
 * stepInto - step into the current function
 *
 * Conceptually this is easy, but from a programming standpoint it's hard.
 * Code like `getBalance(msg.sender)` might be highlighted, but there could
 * be a number of different intermediate steps (like evaluating `msg.sender`)
 * before `getBalance` is stepped into. This function will step into the first
 * function available (where instruction.jump == "i"), ignoring any intermediate
 * steps that fall within the same code range. If there's a step encountered
 * that exists outside of the range, then stepInto will only execute until that
 * step.
 */
function* stepInto() {
  if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
    yield* stepNext();
    return;
  }

  if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    yield* stepOver();
    return;
  }

  const startingDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  const startingRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  var currentDepth;
  var currentRange;

  do {
    yield* stepNext();

    currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
    currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while (
  // the function stack has not increased,
  currentDepth <= startingDepth &&
  // the current source range begins on or after the starting range
  currentRange.start >= startingRange.start &&
  // and the current range ends on or before the starting range ends
  currentRange.start + currentRange.length <= startingRange.start + startingRange.length);
}

/**
 * Step out of the current function
 *
 * This will run until the debugger encounters a decrease in function depth.
 */
function* stepOut() {
  if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    yield* stepOver();
    return;
  }

  const startingDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  var currentDepth;

  do {
    yield* stepNext();

    currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  } while (currentDepth >= startingDepth);
}

/**
 * stepOver - step over the current line
 *
 * Step over the current line. This will step to the next instruction that
 * exists on a different line of code within the same function depth.
 */
function* stepOver() {
  const startingDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  const startingRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  var currentDepth;
  var currentRange;

  do {
    yield* stepNext();

    currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
    currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while (
  // keep stepping provided:
  //
  // we haven't jumped out
  !(currentDepth < startingDepth) && (
  // either: function depth is greater than starting (ignore function calls)
  // or, if we're at the same depth, keep stepping until we're on a new
  // line.
  currentDepth > startingDepth || currentRange.lines.start.line == startingRange.lines.start.line));
}

/**
 * continueUntilBreakpoint - step through execution until a breakpoint
 */
function* continueUntilBreakpoint(action) {
  var currentLocation, currentNode, currentLine, currentSourceId;
  var finished;
  var previousLine, previousSourceId;

  //if breakpoints was not specified, use the stored list from the state.
  //if it was, override that with the specified list.
  //note that explicitly specifying an empty list will advance to the end.
  let breakpoints = action !== undefined && action.breakpoints !== undefined ? action.breakpoints : yield (0, _effects.select)(_selectors2.default.breakpoints);

  let breakpointHit = false;

  currentLocation = yield (0, _effects.select)(_selectors2.default.current.location);
  currentNode = currentLocation.node.id;
  currentLine = currentLocation.sourceRange.lines.start.line;
  currentSourceId = currentLocation.source.id;

  do {
    yield* stepNext();

    previousLine = currentLine;
    previousSourceId = currentSourceId;

    currentLocation = yield (0, _effects.select)(_selectors2.default.current.location);
    finished = yield (0, _effects.select)(_selectors2.default.current.trace.finished);
    debug("finished %o", finished);

    currentNode = currentLocation.node.id;
    currentLine = currentLocation.sourceRange.lines.start.line;
    currentSourceId = currentLocation.source.id;

    breakpointHit = breakpoints.filter(({ sourceId, line, node }) => {
      if (node !== undefined) {
        debug("node %d currentNode %d", node, currentNode);
        return sourceId === currentSourceId && node === currentNode;
      }
      //otherwise, we have a line-style breakpoint; we want to stop at the
      //*first* point on the line
      return sourceId === currentSourceId && line === currentLine && (currentSourceId !== previousSourceId || currentLine !== previousLine);
    }).length > 0;
  } while (!breakpointHit && !finished);
}

/**
 * reset -- reset the state of the debugger
 */
function* reset() {
  yield* data.reset();
  yield* evm.reset();
  yield* solidity.reset();
  yield* trace.reset();
}

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addSource = addSource;
exports.reset = reset;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(5);

var _helpers = __webpack_require__(1);

var _actions = __webpack_require__(35);

var actions = _interopRequireWildcard(_actions);

var _actions2 = __webpack_require__(12);

var _sagas = __webpack_require__(13);

var trace = _interopRequireWildcard(_sagas);

var _selectors = __webpack_require__(11);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:solidity:sagas");

function* addSource(source, sourcePath, ast, compiler) {
  yield (0, _effects.put)(actions.addSource(source, sourcePath, ast, compiler));
}

function* tickSaga() {
  debug("got TICK");

  yield* functionDepthSaga();
  yield* trace.signalTickSagaCompletion();
}

function* functionDepthSaga() {
  if (yield (0, _effects.select)(_selectors2.default.current.willFail)) {
    //we do this case first so we can be sure we're not failing in any of the
    //other cases below!
    yield (0, _effects.put)(actions.externalReturn());
  } else if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
    let jumpDirection = yield (0, _effects.select)(_selectors2.default.current.jumpDirection);
    yield (0, _effects.put)(actions.jump(jumpDirection));
  } else if (yield (0, _effects.select)(_selectors2.default.current.willCall)) {
    debug("about to call");
    if (yield (0, _effects.select)(_selectors2.default.current.callsPrecompileOrExternal)) {
      //call to precompile or externally-owned account; do nothing
    } else {
      yield (0, _effects.put)(actions.externalCall());
    }
  } else if (yield (0, _effects.select)(_selectors2.default.current.willCreate)) {
    yield (0, _effects.put)(actions.externalCall());
  } else if (yield (0, _effects.select)(_selectors2.default.current.willReturn)) {
    yield (0, _effects.put)(actions.externalReturn());
  }
}

function* reset() {
  yield (0, _effects.put)(actions.reset());
}

function* saga() {
  yield (0, _effects.takeEvery)(_actions2.TICK, tickSaga);
}

exports.default = (0, _helpers.prefixName)("solidity", saga);

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addSource = addSource;
exports.jump = jump;
exports.externalCall = externalCall;
exports.externalReturn = externalReturn;
exports.reset = reset;
const ADD_SOURCE = exports.ADD_SOURCE = "SOLIDITY_ADD_SOURCE";
function addSource(source, sourcePath, ast, compiler) {
  return {
    type: ADD_SOURCE,
    source,
    sourcePath,
    ast,
    compiler
  };
}

const JUMP = exports.JUMP = "JUMP";
function jump(jumpDirection) {
  return {
    type: JUMP,
    jumpDirection
  };
}

const EXTERNAL_CALL = exports.EXTERNAL_CALL = "EXTERNAL_CALL";
function externalCall() {
  return { type: EXTERNAL_CALL };
}

const EXTERNAL_RETURN = exports.EXTERNAL_RETURN = "EXTERNAL_RETURN";
function externalReturn() {
  return { type: EXTERNAL_RETURN };
}

const RESET = exports.RESET = "SOLIDITY_RESET";
function reset() {
  return { type: RESET };
}

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(3);

var _selectors = __webpack_require__(11);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:ast:selectors");

/**
 * ast
 */
const ast = (0, _reselectTree.createSelectorTree)({
  /**
   * ast.views
   */
  views: {
    /**
     * ast.views.sources
     */
    sources: (0, _reselectTree.createLeaf)([_selectors2.default.info.sources], sources => sources)
  }
});

exports.default = ast;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var Debugger = __webpack_require__(38).default;

module.exports = Debugger;



/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _asyncToGenerator2 = __webpack_require__(18);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _truffleExpect = __webpack_require__(39);

var _truffleExpect2 = _interopRequireDefault(_truffleExpect);

var _session = __webpack_require__(40);

var _session2 = _interopRequireDefault(_session);

var _reselectTree = __webpack_require__(3);

var _selectors = __webpack_require__(21);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(36);

var _selectors4 = _interopRequireDefault(_selectors3);

var _selectors5 = __webpack_require__(10);

var _selectors6 = _interopRequireDefault(_selectors5);

var _selectors7 = __webpack_require__(9);

var _selectors8 = _interopRequireDefault(_selectors7);

var _selectors9 = __webpack_require__(11);

var _selectors10 = _interopRequireDefault(_selectors9);

var _selectors11 = __webpack_require__(26);

var _selectors12 = _interopRequireDefault(_selectors11);

var _selectors13 = __webpack_require__(24);

var _selectors14 = _interopRequireDefault(_selectors13);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger");


/**
 * @example
 * let session = Debugger
 *   .forTx(<txHash>, {
 *     contracts: [<contract obj>, ...],
 *     provider: <provider instance>
 *   })
 *   .connect();
 */
class Debugger {
  /**
   * @param {Session} session - debugger session
   * @private
   */
  constructor(session) {
    /**
     * @private
     */
    this._session = session;
  }

  /**
   * Instantiates a Debugger for a given transaction hash.
   *
   * @param {String} txHash - transaction hash with leading "0x"
   * @param {{contracts: Array<Contract>, files: Array<String>, provider: Web3Provider}} options -
   * @return {Debugger} instance
   */
  static forTx(txHash, options = {}) {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      _truffleExpect2.default.options(options, ["contracts", "provider"]);

      let session = new _session2.default(options.contracts, options.files, options.provider, txHash);

      try {
        yield session.ready();
        debug("session ready");
      } catch (e) {
        debug("error occurred, unloaded");
        session.unload();
      }

      return new _this(session);
    })();
  }

  /*
   * Instantiates a Debugger for a given project (with no transaction loaded)
   *
   * @param {{contracts: Array<Contract>, files: Array<String>, provider: Web3Provider}} options -
   * @return {Debugger} instance
   */
  static forProject(options = {}) {
    var _this2 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      _truffleExpect2.default.options(options, ["contracts", "provider"]);

      let session = new _session2.default(options.contracts, options.files, options.provider);

      yield session.ready();

      return new _this2(session);
    })();
  }

  /**
   * Connects to the instantiated Debugger.
   *
   * @return {Session} session instance
   */
  connect() {
    return this._session;
  }

  /**
   * Exported selectors
   *
   * See individual selector docs for full listing
   *
   * @example
   * Debugger.selectors.ast.current.tree
   *
   * @example
   * Debugger.selectors.solidity.current.instruction
   *
   * @example
   * Debugger.selectors.trace.steps
   */
  static get selectors() {
    return (0, _reselectTree.createNestedSelector)({
      ast: _selectors4.default,
      data: _selectors2.default,
      trace: _selectors6.default,
      evm: _selectors8.default,
      solidity: _selectors10.default,
      session: _selectors12.default,
      controller: _selectors14.default
    });
  }
}

exports.default = Debugger; /**
                             * @typedef {Object} Contract
                             * @property {string} contractName contract name
                             * @property {string} source solidity source code
                             * @property {string} sourcePath path to source file
                             * @property {string} binary 0x-prefixed hex string with create bytecode
                             * @property {string} sourceMap solidity source map for create bytecode
                             * @property {Object} ast Abstract Syntax Tree from Solidity
                             * @property {string} deployedBinary 0x-prefixed compiled binary (on chain)
                             * @property {string} deployedSourceMap solidity source map for on-chain bytecode
                             */

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = require("truffle-expect");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(6);

var _entries2 = _interopRequireDefault(_entries);

var _values = __webpack_require__(19);

var _values2 = _interopRequireDefault(_values);

var _asyncToGenerator2 = __webpack_require__(18);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = __webpack_require__(41);

var _promise2 = _interopRequireDefault(_promise);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _store = __webpack_require__(42);

var _store2 = _interopRequireDefault(_store);

var _actions = __webpack_require__(20);

var controller = _interopRequireWildcard(_actions);

var _actions2 = __webpack_require__(14);

var actions = _interopRequireWildcard(_actions2);

var _selectors = __webpack_require__(21);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(26);

var _selectors4 = _interopRequireDefault(_selectors3);

var _sagas = __webpack_require__(17);

var dataSagas = _interopRequireWildcard(_sagas);

var _sagas2 = __webpack_require__(33);

var controllerSagas = _interopRequireWildcard(_sagas2);

var _sagas3 = __webpack_require__(59);

var sagas = _interopRequireWildcard(_sagas3);

var _selectors5 = __webpack_require__(24);

var _selectors6 = _interopRequireDefault(_selectors5);

var _reducers = __webpack_require__(61);

var _reducers2 = _interopRequireDefault(_reducers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:session");

/**
 * Debugger Session
 */
class Session {
  /**
   * @param {Array<Contract>} contracts - contract definitions
   * @param {Array<String>} files - array of filenames for sourceMap indexes
   * @param {Web3Provider} provider - web3 provider
   * txHash parameter is now optional!
   * @private
   */
  constructor(contracts, files, provider, txHash) {
    /**
     * @private
     */
    let { store, sagaMiddleware } = (0, _store2.default)(_reducers2.default, sagas.default);
    this._store = store;
    this._sagaMiddleware = sagaMiddleware;

    let { contexts, sources } = Session.normalize(contracts, files);

    // record contracts
    this._store.dispatch(actions.recordContracts(contexts, sources));

    //set up the ready listener
    this._ready = new _promise2.default((accept, reject) => {
      const unsubscribe = this._store.subscribe(() => {
        if (this.view(_selectors4.default.status.ready)) {
          debug("ready!");
          unsubscribe();
          accept();
        } else if (this.view(_selectors4.default.status.errored)) {
          debug("error!");
          unsubscribe();
          reject(this.view(_selectors4.default.status.error));
        }
      });
    });

    //note that txHash is now optional
    this._store.dispatch(actions.start(provider, txHash));
  }

  ready() {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      yield _this._ready;
    })();
  }

  readyAgainAfterLoading(sessionAction) {
    var _this2 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return new _promise2.default(function (accept, reject) {
        let hasStartedWaiting = false;
        debug("reready listener set up");
        const unsubscribe = _this2._store.subscribe(function () {
          debug("reready?");
          if (hasStartedWaiting) {
            if (_this2.view(_selectors4.default.status.ready)) {
              debug("reready!");
              unsubscribe();
              accept(true);
            } else if (_this2.view(_selectors4.default.status.errored)) {
              unsubscribe();
              debug("error!");
              reject(_this2.view(_selectors4.default.status.error));
            }
          } else {
            if (_this2.view(_selectors4.default.status.waiting)) {
              debug("started waiting");
              hasStartedWaiting = true;
            }
            return;
          }
        });
        _this2.dispatch(sessionAction);
      });
    })();
  }

  /**
   * Split up artifacts into "contexts" and "sources", dividing artifact
   * data into appropriate buckets.
   *
   * Multiple contracts can be defined in the same source file, but have
   * different bytecodes.
   *
   * This iterates over the contracts and collects binaries separately
   * from sources, using the optional `files` argument to force
   * source ordering.
   * @private
   */
  static normalize(contracts, files = null) {
    let sourcesByPath = {};
    let contexts = [];
    let sources;

    for (let contract of contracts) {
      let {
        contractName,
        binary,
        sourceMap,
        deployedBinary,
        deployedSourceMap,
        sourcePath,
        source,
        ast,
        abi,
        compiler
      } = contract;

      let contractNode = ast.nodes.find(node => node.nodeType === "ContractDefinition" && node.name === contractName); //ideally we'd hold this off till later, but that would break the
      //direction of the evm/solidity dependence, so we do it now

      let contractId = contractNode.id;
      let contractKind = contractNode.contractKind;

      debug("contractName %s", contractName);
      debug("sourceMap %o", sourceMap);
      debug("compiler %o", compiler);
      debug("abi %O", abi);

      sourcesByPath[sourcePath] = { sourcePath, source, ast, compiler };

      if (binary && binary != "0x") {
        contexts.push({
          contractName,
          binary,
          sourceMap,
          abi,
          compiler,
          contractId,
          contractKind,
          isConstructor: true
        });
      }

      if (deployedBinary && deployedBinary != "0x") {
        contexts.push({
          contractName,
          binary: deployedBinary,
          sourceMap: deployedSourceMap,
          abi,
          compiler,
          contractId,
          contractKind,
          isConstructor: false
        });
      }
    }

    if (!files) {
      sources = (0, _values2.default)(sourcesByPath);
    } else {
      sources = files.map(file => sourcesByPath[file]);
    }

    return { contexts, sources };
  }

  get state() {
    return this._store.getState();
  }

  view(selector) {
    return selector(this.state);
  }

  dispatch(action) {
    var _this3 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      _this3._store.dispatch(action);

      return true;
    })();
  }

  /**
   * @private
   * Allows running any saga -- for internal use only!
   * Using this could seriously screw up the debugger state if you
   * don't know what you're doing!
   */
  _runSaga(saga, ...args) {
    var _this4 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this4._sagaMiddleware.run(saga, ...args).toPromise();
    })();
  }

  interrupt() {
    var _this5 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      yield _this5.dispatch(actions.interrupt());
      yield _this5.dispatch(controller.interrupt());
    })();
  }

  doneStepping(stepperAction) {
    var _this6 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return new _promise2.default(function (resolve) {
        let hasStarted = false;
        const unsubscribe = _this6._store.subscribe(function () {
          const isStepping = _this6.view(_selectors6.default.isStepping);

          if (isStepping && !hasStarted) {
            hasStarted = true;
            debug("heard step start");
            return;
          }

          if (!isStepping && hasStarted) {
            debug("heard step stop");
            unsubscribe();
            resolve(true);
          }
        });
        _this6.dispatch(stepperAction);
      });
    })();
  }

  //returns true on success, false on already loaded, error object on failure
  load(txHash) {
    var _this7 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      if (_this7.view(_selectors4.default.status.loaded)) {
        return false;
      }
      try {
        return yield _this7.readyAgainAfterLoading(actions.loadTransaction(txHash));
      } catch (e) {
        _this7._runSaga(sagas.unload);
        return e;
      }
    })();
  }

  //returns true on success, false on already unloaded
  unload() {
    var _this8 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      if (!_this8.view(_selectors4.default.status.loaded)) {
        return false;
      }
      debug("unloading");
      yield _this8._runSaga(sagas.unload);
      return true;
    })();
  }

  //Note: count is an optional argument; default behavior is to advance 1
  advance(count) {
    var _this9 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this9.doneStepping(controller.advance(count));
    })();
  }

  stepNext() {
    var _this10 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this10.doneStepping(controller.stepNext());
    })();
  }

  stepOver() {
    var _this11 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this11.doneStepping(controller.stepOver());
    })();
  }

  stepInto() {
    var _this12 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this12.doneStepping(controller.stepInto());
    })();
  }

  stepOut() {
    var _this13 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this13.doneStepping(controller.stepOut());
    })();
  }

  reset() {
    var _this14 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      let loaded = _this14.view(_selectors4.default.status.loaded);
      if (!loaded) {
        return;
      }
      return yield _this14._runSaga(controllerSagas.reset);
    })();
  }

  //NOTE: breakpoints is an OPTIONAL argument for if you want to supply your
  //own list of breakpoints; leave it out to use the internal one (as
  //controlled by the functions below)
  continueUntilBreakpoint(breakpoints) {
    var _this15 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this15.doneStepping(controller.continueUntilBreakpoint(breakpoints));
    })();
  }

  addBreakpoint(breakpoint) {
    var _this16 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this16.dispatch(controller.addBreakpoint(breakpoint));
    })();
  }

  removeBreakpoint(breakpoint) {
    var _this17 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this17.dispatch(controller.removeBreakpoint(breakpoint));
    })();
  }

  removeAllBreakpoints() {
    var _this18 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this18.dispatch(controller.removeAllBreakpoints());
    })();
  }

  //deprecated -- decode is now *always* ready!
  decodeReady() {
    return (0, _asyncToGenerator3.default)(function* () {
      return true;
    })();
  }

  variable(name) {
    var _this19 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      const definitions = _this19.view(_selectors2.default.current.identifiers.definitions);
      const refs = _this19.view(_selectors2.default.current.identifiers.refs);

      return yield _this19._runSaga(dataSagas.decode, definitions[name], refs[name]);
    })();
  }

  variables() {
    var _this20 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      if (!_this20.view(_selectors4.default.status.loaded)) {
        return {};
      }
      let definitions = _this20.view(_selectors2.default.current.identifiers.definitions);
      let refs = _this20.view(_selectors2.default.current.identifiers.refs);
      let decoded = {};
      for (let [identifier, ref] of (0, _entries2.default)(refs)) {
        if (identifier in definitions) {
          decoded[identifier] = yield _this20._runSaga(dataSagas.decode, definitions[identifier], ref);
        }
      }
      return decoded;
    })();
  }
}
exports.default = Session;

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/promise");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(43);
} else if (process.env.NODE_ENV === "test") {
  module.exports = require("./test");
} else {
  module.exports = require("./development");
}

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _common = __webpack_require__(44);

var _common2 = _interopRequireDefault(_common);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _common2.default;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(6);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(8);

var _assign2 = _interopRequireDefault(_assign);

exports.abbreviateValues = abbreviateValues;
exports.default = configureStore;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _redux = __webpack_require__(7);

var _reduxSaga = __webpack_require__(45);

var _reduxSaga2 = _interopRequireDefault(_reduxSaga);

var _reduxCliLogger = __webpack_require__(46);

var _reduxCliLogger2 = _interopRequireDefault(_reduxCliLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:store:common");
const reduxDebug = (0, _debug2.default)("debugger:redux");

function abbreviateValues(value, options = {}, depth = 0) {
  options.stringLimit = options.stringLimit || 66;
  options.arrayLimit = options.arrayLimit || 8;
  options.recurseLimit = options.recurseLimit || 4;

  if (depth > options.recurseLimit) {
    return "...";
  }

  const recurse = child => abbreviateValues(child, options, depth + 1);

  if (value instanceof Array) {
    if (value.length > options.arrayLimit) {
      value = [...value.slice(0, options.arrayLimit / 2), "...", ...value.slice(value.length - options.arrayLimit / 2 + 1)];
    }

    return value.map(recurse);
  } else if (value instanceof Object) {
    return (0, _assign2.default)({}, ...(0, _entries2.default)(value).map(([k, v]) => ({ [recurse(k)]: recurse(v) })));
  } else if (typeof value === "string" && value.length > options.stringLimit) {
    let inner = "...";
    let extractAmount = (options.stringLimit - inner.length) / 2;
    let leading = value.slice(0, Math.ceil(extractAmount));
    let trailing = value.slice(value.length - Math.floor(extractAmount));
    return `${leading}${inner}${trailing}`;
  } else {
    return value;
  }
}

function configureStore(reducer, saga, initialState, composeEnhancers) {
  const sagaMiddleware = (0, _reduxSaga2.default)();

  if (!composeEnhancers) {
    composeEnhancers = _redux.compose;
  }

  const loggerMiddleware = (0, _reduxCliLogger2.default)({
    log: reduxDebug,
    stateTransformer: state => abbreviateValues(state, {
      arrayLimit: 4,
      recurseLimit: 3
    }),
    actionTransformer: abbreviateValues
  });

  let store = (0, _redux.createStore)(reducer, initialState, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware, loggerMiddleware)));

  sagaMiddleware.run(saga);

  return { store, sagaMiddleware };
}

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = require("redux-saga");

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = require("redux-cli-logger");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var json = typeof JSON !== 'undefined' ? JSON : __webpack_require__(48);

module.exports = function (obj, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = { cmp: opts };
    var space = opts.space || '';
    if (typeof space === 'number') space = Array(space+1).join(' ');
    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
    var replacer = opts.replacer || function(key, value) { return value; };

    var cmp = opts.cmp && (function (f) {
        return function (node) {
            return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
            };
        };
    })(opts.cmp);

    var seen = [];
    return (function stringify (parent, key, node, level) {
        var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
        var colonSeparator = space ? ': ' : ':';

        if (node && node.toJSON && typeof node.toJSON === 'function') {
            node = node.toJSON();
        }

        node = replacer.call(parent, key, node);

        if (node === undefined) {
            return;
        }
        if (typeof node !== 'object' || node === null) {
            return json.stringify(node);
        }
        if (isArray(node)) {
            var out = [];
            for (var i = 0; i < node.length; i++) {
                var item = stringify(node, i, node[i], level+1) || json.stringify(null);
                out.push(indent + space + item);
            }
            return '[' + out.join(',') + indent + ']';
        }
        else {
            if (seen.indexOf(node) !== -1) {
                if (cycles) return json.stringify('__cycle__');
                throw new TypeError('Converting circular structure to JSON');
            }
            else seen.push(node);

            var keys = objectKeys(node).sort(cmp && cmp(node));
            var out = [];
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var value = stringify(node, key, node[key], level+1);

                if(!value) continue;

                var keyValue = json.stringify(key)
                    + colonSeparator
                    + value;
                ;
                out.push(indent + space + keyValue);
            }
            seen.splice(seen.indexOf(node), 1);
            return '{' + out.join(',') + indent + '}';
        }
    })({ '': obj }, '', obj, 0);
};

var isArray = Array.isArray || function (x) {
    return {}.toString.call(x) === '[object Array]';
};

var objectKeys = Object.keys || function (obj) {
    var has = Object.prototype.hasOwnProperty || function () { return true };
    var keys = [];
    for (var key in obj) {
        if (has.call(obj, key)) keys.push(key);
    }
    return keys;
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

exports.parse = __webpack_require__(49);
exports.stringify = __webpack_require__(50);


/***/ }),
/* 49 */
/***/ (function(module, exports) {

var at, // The index of the current character
    ch, // The current character
    escapee = {
        '"':  '"',
        '\\': '\\',
        '/':  '/',
        b:    '\b',
        f:    '\f',
        n:    '\n',
        r:    '\r',
        t:    '\t'
    },
    text,

    error = function (m) {
        // Call error when something is wrong.
        throw {
            name:    'SyntaxError',
            message: m,
            at:      at,
            text:    text
        };
    },
    
    next = function (c) {
        // If a c parameter is provided, verify that it matches the current character.
        if (c && c !== ch) {
            error("Expected '" + c + "' instead of '" + ch + "'");
        }
        
        // Get the next character. When there are no more characters,
        // return the empty string.
        
        ch = text.charAt(at);
        at += 1;
        return ch;
    },
    
    number = function () {
        // Parse a number value.
        var number,
            string = '';
        
        if (ch === '-') {
            string = '-';
            next('-');
        }
        while (ch >= '0' && ch <= '9') {
            string += ch;
            next();
        }
        if (ch === '.') {
            string += '.';
            while (next() && ch >= '0' && ch <= '9') {
                string += ch;
            }
        }
        if (ch === 'e' || ch === 'E') {
            string += ch;
            next();
            if (ch === '-' || ch === '+') {
                string += ch;
                next();
            }
            while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
            }
        }
        number = +string;
        if (!isFinite(number)) {
            error("Bad number");
        } else {
            return number;
        }
    },
    
    string = function () {
        // Parse a string value.
        var hex,
            i,
            string = '',
            uffff;
        
        // When parsing for string values, we must look for " and \ characters.
        if (ch === '"') {
            while (next()) {
                if (ch === '"') {
                    next();
                    return string;
                } else if (ch === '\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    } else {
                        break;
                    }
                } else {
                    string += ch;
                }
            }
        }
        error("Bad string");
    },

    white = function () {

// Skip whitespace.

        while (ch && ch <= ' ') {
            next();
        }
    },

    word = function () {

// true, false, or null.

        switch (ch) {
        case 't':
            next('t');
            next('r');
            next('u');
            next('e');
            return true;
        case 'f':
            next('f');
            next('a');
            next('l');
            next('s');
            next('e');
            return false;
        case 'n':
            next('n');
            next('u');
            next('l');
            next('l');
            return null;
        }
        error("Unexpected '" + ch + "'");
    },

    value,  // Place holder for the value function.

    array = function () {

// Parse an array value.

        var array = [];

        if (ch === '[') {
            next('[');
            white();
            if (ch === ']') {
                next(']');
                return array;   // empty array
            }
            while (ch) {
                array.push(value());
                white();
                if (ch === ']') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error("Bad array");
    },

    object = function () {

// Parse an object value.

        var key,
            object = {};

        if (ch === '{') {
            next('{');
            white();
            if (ch === '}') {
                next('}');
                return object;   // empty object
            }
            while (ch) {
                key = string();
                white();
                next(':');
                if (Object.hasOwnProperty.call(object, key)) {
                    error('Duplicate key "' + key + '"');
                }
                object[key] = value();
                white();
                if (ch === '}') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error("Bad object");
    };

value = function () {

// Parse a JSON value. It could be an object, an array, a string, a number,
// or a word.

    white();
    switch (ch) {
    case '{':
        return object();
    case '[':
        return array();
    case '"':
        return string();
    case '-':
        return number();
    default:
        return ch >= '0' && ch <= '9' ? number() : word();
    }
};

// Return the json_parse function. It will have access to all of the above
// functions and variables.

module.exports = function (source, reviver) {
    var result;
    
    text = source;
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) {
        error("Syntax error");
    }

    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.

    return typeof reviver === 'function' ? (function walk(holder, key) {
        var k, v, value = holder[key];
        if (value && typeof value === 'object') {
            for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = walk(value, k);
                    if (v !== undefined) {
                        value[k] = v;
                    } else {
                        delete value[k];
                    }
                }
            }
        }
        return reviver.call(holder, key, value);
    }({'': result}, '')) : result;
};


/***/ }),
/* 50 */
/***/ (function(module, exports) {

var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {    // table of character substitutions
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"' : '\\"',
        '\\': '\\\\'
    },
    rep;

function quote(string) {
    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.
    
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
        var c = meta[a];
        return typeof c === 'string' ? c :
            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
}

function str(key, holder) {
    // Produce a string from holder[key].
    var i,          // The loop counter.
        k,          // The member key.
        v,          // The member value.
        length,
        mind = gap,
        partial,
        value = holder[key];
    
    // If the value has a toJSON method, call it to obtain a replacement value.
    if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
        value = value.toJSON(key);
    }
    
    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.
    if (typeof rep === 'function') {
        value = rep.call(holder, key, value);
    }
    
    // What happens next depends on the value's type.
    switch (typeof value) {
        case 'string':
            return quote(value);
        
        case 'number':
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : 'null';
        
        case 'boolean':
        case 'null':
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);
            
        case 'object':
            if (!value) return 'null';
            gap += indent;
            partial = [];
            
            // Array.isArray
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }
                
                // Join all of the elements together, separated with commas, and
                // wrap them in brackets.
                v = partial.length === 0 ? '[]' : gap ?
                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                    '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }
            
            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            else {
                // Otherwise, iterate through all of the keys in the object.
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            
        // Join all of the member texts together, separated with commas,
        // and wrap them in braces.

        v = partial.length === 0 ? '{}' : gap ?
            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
            '{' + partial.join(',') + '}';
        gap = mind;
        return v;
    }
}

module.exports = function (value, replacer, space) {
    var i;
    gap = '';
    indent = '';
    
    // If the space parameter is a number, make an indent string containing that
    // many spaces.
    if (typeof space === 'number') {
        for (i = 0; i < space; i += 1) {
            indent += ' ';
        }
    }
    // If the space parameter is a string, it will be used as the indent string.
    else if (typeof space === 'string') {
        indent = space;
    }

    // If there is a replacer, it must be a function or an array.
    // Otherwise, throw an error.
    rep = replacer;
    if (replacer && typeof replacer !== 'function'
    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
        throw new Error('JSON.stringify');
    }
    
    // Make a fake root object containing our value under the key of ''.
    // Return the result of stringifying the value.
    return str('', {'': value});
};


/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = require("truffle-solidity-utils");

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = require("truffle-code-utils");

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// An augmented AVL Tree where each node maintains a list of records and their search intervals.
// Record is composed of an interval and its underlying data, sent by a client. This allows the
// interval tree to have the same interval inserted multiple times, as long its data is different.
// Both insertion and deletion require O(log n) time. Searching requires O(k*logn) time, where `k`
// is the number of intervals in the output list.
Object.defineProperty(exports, "__esModule", { value: true });
var isSame = __webpack_require__(54);
function height(node) {
    if (node === undefined) {
        return -1;
    }
    else {
        return node.height;
    }
}
var Node = /** @class */ (function () {
    function Node(intervalTree, record) {
        this.intervalTree = intervalTree;
        this.records = [];
        this.height = 0;
        this.key = record.low;
        this.max = record.high;
        // Save the array of all records with the same key for this node
        this.records.push(record);
    }
    // Gets the highest record.high value for this node
    Node.prototype.getNodeHigh = function () {
        var high = this.records[0].high;
        for (var i = 1; i < this.records.length; i++) {
            if (this.records[i].high > high) {
                high = this.records[i].high;
            }
        }
        return high;
    };
    // Updates height value of the node. Called during insertion, rebalance, removal
    Node.prototype.updateHeight = function () {
        this.height = Math.max(height(this.left), height(this.right)) + 1;
    };
    // Updates the max value of all the parents after inserting into already existing node, as well as
    // removing the node completely or removing the record of an already existing node. Starts with
    // the parent of an affected node and bubbles up to root
    Node.prototype.updateMaxOfParents = function () {
        if (this === undefined) {
            return;
        }
        var thisHigh = this.getNodeHigh();
        if (this.left !== undefined && this.right !== undefined) {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(this.left.max, thisHigh);
        }
        else if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(this.right.max, thisHigh);
        }
        else {
            this.max = thisHigh;
        }
        if (this.parent) {
            this.parent.updateMaxOfParents();
        }
    };
    /*
    Left-Left case:
  
           z                                      y
          / \                                   /   \
         y   T4      Right Rotate (z)          x     z
        / \          - - - - - - - - ->       / \   / \
       x   T3                                T1 T2 T3 T4
      / \
    T1   T2
  
    Left-Right case:
  
         z                               z                           x
        / \                             / \                        /   \
       y   T4  Left Rotate (y)         x  T4  Right Rotate(z)     y     z
      / \      - - - - - - - - ->     / \      - - - - - - - ->  / \   / \
    T1   x                           y  T3                      T1 T2 T3 T4
        / \                         / \
      T2   T3                      T1 T2
    */
    // Handles Left-Left case and Left-Right case after rebalancing AVL tree
    Node.prototype._updateMaxAfterRightRotate = function () {
        var parent = this.parent;
        var left = parent.left;
        // Update max of left sibling (x in first case, y in second)
        var thisParentLeftHigh = left.getNodeHigh();
        if (left.left === undefined && left.right !== undefined) {
            left.max = Math.max(thisParentLeftHigh, left.right.max);
        }
        else if (left.left !== undefined && left.right === undefined) {
            left.max = Math.max(thisParentLeftHigh, left.left.max);
        }
        else if (left.left === undefined && left.right === undefined) {
            left.max = thisParentLeftHigh;
        }
        else {
            left.max = Math.max(Math.max(left.left.max, left.right.max), thisParentLeftHigh);
        }
        // Update max of itself (z)
        var thisHigh = this.getNodeHigh();
        if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(thisHigh, this.right.max);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(thisHigh, this.left.max);
        }
        else if (this.left === undefined && this.right === undefined) {
            this.max = thisHigh;
        }
        else {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        // Update max of parent (y in first case, x in second)
        parent.max = Math.max(Math.max(parent.left.max, parent.right.max), parent.getNodeHigh());
    };
    /*
    Right-Right case:
  
      z                               y
     / \                            /   \
    T1  y     Left Rotate(z)       z     x
       / \   - - - - - - - ->     / \   / \
      T2  x                      T1 T2 T3 T4
         / \
        T3 T4
  
    Right-Left case:
  
       z                            z                            x
      / \                          / \                         /   \
     T1  y   Right Rotate (y)     T1  x      Left Rotate(z)   z     y
        / \  - - - - - - - - ->      / \   - - - - - - - ->  / \   / \
       x  T4                        T2  y                   T1 T2 T3 T4
      / \                              / \
    T2   T3                           T3 T4
    */
    // Handles Right-Right case and Right-Left case in rebalancing AVL tree
    Node.prototype._updateMaxAfterLeftRotate = function () {
        var parent = this.parent;
        var right = parent.right;
        // Update max of right sibling (x in first case, y in second)
        var thisParentRightHigh = right.getNodeHigh();
        if (right.left === undefined && right.right !== undefined) {
            right.max = Math.max(thisParentRightHigh, right.right.max);
        }
        else if (right.left !== undefined && right.right === undefined) {
            right.max = Math.max(thisParentRightHigh, right.left.max);
        }
        else if (right.left === undefined && right.right === undefined) {
            right.max = thisParentRightHigh;
        }
        else {
            right.max = Math.max(Math.max(right.left.max, right.right.max), thisParentRightHigh);
        }
        // Update max of itself (z)
        var thisHigh = this.getNodeHigh();
        if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(thisHigh, this.right.max);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(thisHigh, this.left.max);
        }
        else if (this.left === undefined && this.right === undefined) {
            this.max = thisHigh;
        }
        else {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        // Update max of parent (y in first case, x in second)
        parent.max = Math.max(Math.max(parent.left.max, right.max), parent.getNodeHigh());
    };
    Node.prototype._leftRotate = function () {
        var rightChild = this.right;
        rightChild.parent = this.parent;
        if (rightChild.parent === undefined) {
            this.intervalTree.root = rightChild;
        }
        else {
            if (rightChild.parent.left === this) {
                rightChild.parent.left = rightChild;
            }
            else if (rightChild.parent.right === this) {
                rightChild.parent.right = rightChild;
            }
        }
        this.right = rightChild.left;
        if (this.right !== undefined) {
            this.right.parent = this;
        }
        rightChild.left = this;
        this.parent = rightChild;
        this.updateHeight();
        rightChild.updateHeight();
    };
    Node.prototype._rightRotate = function () {
        var leftChild = this.left;
        leftChild.parent = this.parent;
        if (leftChild.parent === undefined) {
            this.intervalTree.root = leftChild;
        }
        else {
            if (leftChild.parent.left === this) {
                leftChild.parent.left = leftChild;
            }
            else if (leftChild.parent.right === this) {
                leftChild.parent.right = leftChild;
            }
        }
        this.left = leftChild.right;
        if (this.left !== undefined) {
            this.left.parent = this;
        }
        leftChild.right = this;
        this.parent = leftChild;
        this.updateHeight();
        leftChild.updateHeight();
    };
    // Rebalances the tree if the height value between two nodes of the same parent is greater than
    // two. There are 4 cases that can happen which are outlined in the graphics above
    Node.prototype._rebalance = function () {
        if (height(this.left) >= 2 + height(this.right)) {
            var left = this.left;
            if (height(left.left) >= height(left.right)) {
                // Left-Left case
                this._rightRotate();
                this._updateMaxAfterRightRotate();
            }
            else {
                // Left-Right case
                left._leftRotate();
                this._rightRotate();
                this._updateMaxAfterRightRotate();
            }
        }
        else if (height(this.right) >= 2 + height(this.left)) {
            var right = this.right;
            if (height(right.right) >= height(right.left)) {
                // Right-Right case
                this._leftRotate();
                this._updateMaxAfterLeftRotate();
            }
            else {
                // Right-Left case
                right._rightRotate();
                this._leftRotate();
                this._updateMaxAfterLeftRotate();
            }
        }
    };
    Node.prototype.insert = function (record) {
        if (record.low < this.key) {
            // Insert into left subtree
            if (this.left === undefined) {
                this.left = new Node(this.intervalTree, record);
                this.left.parent = this;
            }
            else {
                this.left.insert(record);
            }
        }
        else {
            // Insert into right subtree
            if (this.right === undefined) {
                this.right = new Node(this.intervalTree, record);
                this.right.parent = this;
            }
            else {
                this.right.insert(record);
            }
        }
        // Update the max value of this ancestor if needed
        if (this.max < record.high) {
            this.max = record.high;
        }
        // Update height of each node
        this.updateHeight();
        // Rebalance the tree to ensure all operations are executed in O(logn) time. This is especially
        // important in searching, as the tree has a high chance of degenerating without the rebalancing
        this._rebalance();
    };
    Node.prototype._getOverlappingRecords = function (currentNode, low, high) {
        if (currentNode.key <= high && low <= currentNode.getNodeHigh()) {
            // Nodes are overlapping, check if individual records in the node are overlapping
            var tempResults = [];
            for (var i = 0; i < currentNode.records.length; i++) {
                if (currentNode.records[i].high >= low) {
                    tempResults.push(currentNode.records[i]);
                }
            }
            return tempResults;
        }
        return [];
    };
    Node.prototype.search = function (low, high) {
        // Don't search nodes that don't exist
        if (this === undefined) {
            return [];
        }
        var leftSearch = [];
        var ownSearch = [];
        var rightSearch = [];
        // If interval is to the right of the rightmost point of any interval in this node and all its
        // children, there won't be any matches
        if (low > this.max) {
            return [];
        }
        // Search left children
        if (this.left !== undefined && this.left.max >= low) {
            leftSearch = this.left.search(low, high);
        }
        // Check this node
        ownSearch = this._getOverlappingRecords(this, low, high);
        // If interval is to the left of the start of this interval, then it can't be in any child to
        // the right
        if (high < this.key) {
            return leftSearch.concat(ownSearch);
        }
        // Otherwise, search right children
        if (this.right !== undefined) {
            rightSearch = this.right.search(low, high);
        }
        // Return accumulated results, if any
        return leftSearch.concat(ownSearch, rightSearch);
    };
    // Searches for a node by a `key` value
    Node.prototype.searchExisting = function (low) {
        if (this === undefined) {
            return undefined;
        }
        if (this.key === low) {
            return this;
        }
        else if (low < this.key) {
            if (this.left !== undefined) {
                return this.left.searchExisting(low);
            }
        }
        else {
            if (this.right !== undefined) {
                return this.right.searchExisting(low);
            }
        }
        return undefined;
    };
    // Returns the smallest node of the subtree
    Node.prototype._minValue = function () {
        if (this.left === undefined) {
            return this;
        }
        else {
            return this.left._minValue();
        }
    };
    Node.prototype.remove = function (node) {
        var parent = this.parent;
        if (node.key < this.key) {
            // Node to be removed is on the left side
            if (this.left !== undefined) {
                return this.left.remove(node);
            }
            else {
                return undefined;
            }
        }
        else if (node.key > this.key) {
            // Node to be removed is on the right side
            if (this.right !== undefined) {
                return this.right.remove(node);
            }
            else {
                return undefined;
            }
        }
        else {
            if (this.left !== undefined && this.right !== undefined) {
                // Node has two children
                var minValue = this.right._minValue();
                this.key = minValue.key;
                this.records = minValue.records;
                return this.right.remove(this);
            }
            else if (parent.left === this) {
                // One child or no child case on left side
                if (this.right !== undefined) {
                    parent.left = this.right;
                    this.right.parent = parent;
                }
                else {
                    parent.left = this.left;
                    if (this.left !== undefined) {
                        this.left.parent = parent;
                    }
                }
                parent.updateMaxOfParents();
                parent.updateHeight();
                parent._rebalance();
                return this;
            }
            else if (parent.right === this) {
                // One child or no child case on right side
                if (this.right !== undefined) {
                    parent.right = this.right;
                    this.right.parent = parent;
                }
                else {
                    parent.right = this.left;
                    if (this.left !== undefined) {
                        this.left.parent = parent;
                    }
                }
                parent.updateMaxOfParents();
                parent.updateHeight();
                parent._rebalance();
                return this;
            }
        }
    };
    return Node;
}());
exports.Node = Node;
var IntervalTree = /** @class */ (function () {
    function IntervalTree() {
        this.count = 0;
    }
    IntervalTree.prototype.insert = function (record) {
        if (record.low > record.high) {
            throw new Error('`low` value must be lower or equal to `high` value');
        }
        if (this.root === undefined) {
            // Base case: Tree is empty, new node becomes root
            this.root = new Node(this, record);
            this.count++;
            return true;
        }
        else {
            // Otherwise, check if node already exists with the same key
            var node = this.root.searchExisting(record.low);
            if (node !== undefined) {
                // Check the records in this node if there already is the one with same low, high, data
                for (var i = 0; i < node.records.length; i++) {
                    if (isSame(node.records[i], record)) {
                        // This record is same as the one we're trying to insert; return false to indicate
                        // nothing has been inserted
                        return false;
                    }
                }
                // Add the record to the node
                node.records.push(record);
                // Update max of the node and its parents if necessary
                if (record.high > node.max) {
                    node.max = record.high;
                    if (node.parent) {
                        node.parent.updateMaxOfParents();
                    }
                }
                this.count++;
                return true;
            }
            else {
                // Node with this key doesn't already exist. Call insert function on root's node
                this.root.insert(record);
                this.count++;
                return true;
            }
        }
    };
    IntervalTree.prototype.search = function (low, high) {
        if (this.root === undefined) {
            // Tree is empty; return empty array
            return [];
        }
        else {
            return this.root.search(low, high);
        }
    };
    IntervalTree.prototype.remove = function (record) {
        if (this.root === undefined) {
            // Tree is empty; nothing to remove
            return false;
        }
        else {
            var node = this.root.searchExisting(record.low);
            if (node === undefined) {
                return false;
            }
            else if (node.records.length > 1) {
                var removedRecord = void 0;
                // Node with this key has 2 or more records. Find the one we need and remove it
                for (var i = 0; i < node.records.length; i++) {
                    if (isSame(node.records[i], record)) {
                        removedRecord = node.records[i];
                        node.records.splice(i, 1);
                        break;
                    }
                }
                if (removedRecord) {
                    removedRecord = undefined;
                    // Update max of that node and its parents if necessary
                    if (record.high === node.max) {
                        var nodeHigh = node.getNodeHigh();
                        if (node.left !== undefined && node.right !== undefined) {
                            node.max = Math.max(Math.max(node.left.max, node.right.max), nodeHigh);
                        }
                        else if (node.left !== undefined && node.right === undefined) {
                            node.max = Math.max(node.left.max, nodeHigh);
                        }
                        else if (node.left === undefined && node.right !== undefined) {
                            node.max = Math.max(node.right.max, nodeHigh);
                        }
                        else {
                            node.max = nodeHigh;
                        }
                        if (node.parent) {
                            node.parent.updateMaxOfParents();
                        }
                    }
                    this.count--;
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (node.records.length === 1) {
                // Node with this key has only 1 record. Check if the remaining record in this node is
                // actually the one we want to remove
                if (isSame(node.records[0], record)) {
                    // The remaining record is the one we want to remove. Remove the whole node from the tree
                    if (this.root.key === node.key) {
                        // We're removing the root element. Create a dummy node that will temporarily take
                        // root's parent role
                        var rootParent = new Node(this, { low: record.low, high: record.low });
                        rootParent.left = this.root;
                        this.root.parent = rootParent;
                        var removedNode = this.root.remove(node);
                        this.root = rootParent.left;
                        if (this.root !== undefined) {
                            this.root.parent = undefined;
                        }
                        if (removedNode) {
                            removedNode = undefined;
                            this.count--;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        var removedNode = this.root.remove(node);
                        if (removedNode) {
                            removedNode = undefined;
                            this.count--;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                }
                else {
                    // The remaining record is not the one we want to remove
                    return false;
                }
            }
            else {
                // No records at all in this node?! Shouldn't happen
                return false;
            }
        }
    };
    IntervalTree.prototype.inOrder = function () {
        return new InOrder(this.root);
    };
    IntervalTree.prototype.preOrder = function () {
        return new PreOrder(this.root);
    };
    return IntervalTree;
}());
exports.IntervalTree = IntervalTree;
var DataIntervalTree = /** @class */ (function () {
    function DataIntervalTree() {
        this.tree = new IntervalTree();
    }
    DataIntervalTree.prototype.insert = function (low, high, data) {
        return this.tree.insert({ low: low, high: high, data: data });
    };
    DataIntervalTree.prototype.remove = function (low, high, data) {
        return this.tree.remove({ low: low, high: high, data: data });
    };
    DataIntervalTree.prototype.search = function (low, high) {
        return this.tree.search(low, high).map(function (v) { return v.data; });
    };
    DataIntervalTree.prototype.inOrder = function () {
        return this.tree.inOrder();
    };
    DataIntervalTree.prototype.preOrder = function () {
        return this.tree.preOrder();
    };
    Object.defineProperty(DataIntervalTree.prototype, "count", {
        get: function () {
            return this.tree.count;
        },
        enumerable: true,
        configurable: true
    });
    return DataIntervalTree;
}());
exports.default = DataIntervalTree;
var InOrder = /** @class */ (function () {
    function InOrder(startNode) {
        this.stack = [];
        if (startNode !== undefined) {
            this.push(startNode);
        }
    }
    InOrder.prototype.next = function () {
        // Will only happen if stack is empty and pop is called
        if (this.currentNode === undefined) {
            return {
                done: true,
                value: undefined,
            };
        }
        // Process this node
        if (this.i < this.currentNode.records.length) {
            return {
                done: false,
                value: this.currentNode.records[this.i++],
            };
        }
        if (this.currentNode.right !== undefined) {
            this.push(this.currentNode.right);
        }
        else {
            // Might pop the last and set this.currentNode = undefined
            this.pop();
        }
        return this.next();
    };
    InOrder.prototype.push = function (node) {
        this.currentNode = node;
        this.i = 0;
        while (this.currentNode.left !== undefined) {
            this.stack.push(this.currentNode);
            this.currentNode = this.currentNode.left;
        }
    };
    InOrder.prototype.pop = function () {
        this.currentNode = this.stack.pop();
        this.i = 0;
    };
    return InOrder;
}());
exports.InOrder = InOrder;
if (typeof Symbol === 'function') {
    InOrder.prototype[Symbol.iterator] = function () { return this; };
}
var PreOrder = /** @class */ (function () {
    function PreOrder(startNode) {
        this.stack = [];
        this.i = 0;
        this.currentNode = startNode;
    }
    PreOrder.prototype.next = function () {
        // Will only happen if stack is empty and pop is called,
        // which only happens if there is no right node (i.e we are done)
        if (this.currentNode === undefined) {
            return {
                done: true,
                value: undefined,
            };
        }
        // Process this node
        if (this.i < this.currentNode.records.length) {
            return {
                done: false,
                value: this.currentNode.records[this.i++],
            };
        }
        if (this.currentNode.right !== undefined) {
            this.push(this.currentNode.right);
        }
        if (this.currentNode.left !== undefined) {
            this.push(this.currentNode.left);
        }
        this.pop();
        return this.next();
    };
    PreOrder.prototype.push = function (node) {
        this.stack.push(node);
    };
    PreOrder.prototype.pop = function () {
        this.currentNode = this.stack.pop();
        this.i = 0;
    };
    return PreOrder;
}());
exports.PreOrder = PreOrder;
if (typeof Symbol === 'function') {
    PreOrder.prototype[Symbol.iterator] = function () { return this; };
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 54 */
/***/ (function(module, exports) {

//

module.exports = function shallowEqual(objA, objB, compare, compareContext) {
  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (ret !== void 0) {
    return !!ret;
  }

  if (objA === objB) {
    return true;
  }

  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

  // Test for A's keys different from B.
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];

    if (!bHasOwnProperty(key)) {
      return false;
    }

    var valueA = objA[key];
    var valueB = objB[key];

    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (ret === false || (ret === void 0 && valueA !== valueB)) {
      return false;
    }
  }

  return true;
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.inspect = inspect;
exports.fetchBinary = fetchBinary;
exports.receiveBinary = receiveBinary;
exports.receiveTrace = receiveTrace;
exports.receiveCall = receiveCall;
exports.error = error;
const INIT_WEB3 = exports.INIT_WEB3 = "INIT_WEB3";
function init(provider) {
  return {
    type: INIT_WEB3,
    provider
  };
}

const INSPECT = exports.INSPECT = "INSPECT_TRANSACTION";
function inspect(txHash) {
  return {
    type: INSPECT,
    txHash
  };
}

const FETCH_BINARY = exports.FETCH_BINARY = "FETCH_BINARY";
function fetchBinary(address, block) {
  return {
    type: FETCH_BINARY,
    address,
    block //optional
  };
}

const RECEIVE_BINARY = exports.RECEIVE_BINARY = "RECEIVE_BINARY";
function receiveBinary(address, binary) {
  return {
    type: RECEIVE_BINARY,
    address,
    binary
  };
}

const RECEIVE_TRACE = exports.RECEIVE_TRACE = "RECEIVE_TRACE";
function receiveTrace(trace) {
  return {
    type: RECEIVE_TRACE,
    trace
  };
}

const RECEIVE_CALL = exports.RECEIVE_CALL = "RECEIVE_CALL";
function receiveCall({
  address,
  binary,
  data,
  storageAddress,
  status,
  sender,
  value,
  gasprice,
  block
}) {
  return {
    type: RECEIVE_CALL,
    address,
    binary,
    data,
    storageAddress,
    status, //only used for creation calls at present!
    sender,
    value,
    gasprice,
    block
  };
}

const ERROR_WEB3 = exports.ERROR_WEB3 = "ERROR_WEB3";
function error(error) {
  return {
    type: ERROR_WEB3,
    error
  };
}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _asyncToGenerator2 = __webpack_require__(18);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _web = __webpack_require__(31);

var _web2 = _interopRequireDefault(_web);

var _util = __webpack_require__(57);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:web3:adapter");

class Web3Adapter {
  constructor(provider) {
    this.web3 = new _web2.default(provider);
  }

  getTrace(txHash) {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      let result = yield (0, _util.promisify)(_this.web3.currentProvider.send)(
      //send *only* uses callbacks, so we use promsifiy to make things more
      //readable
      {
        jsonrpc: "2.0",
        method: "debug_traceTransaction",
        params: [txHash, {}],
        id: new Date().getTime()
      });
      if (result.error) {
        throw new Error(result.error.message);
      } else {
        return result.result.structLogs;
      }
    })();
  }

  getTransaction(txHash) {
    var _this2 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this2.web3.eth.getTransaction(txHash);
    })();
  }

  getReceipt(txHash) {
    var _this3 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this3.web3.eth.getTransactionReceipt(txHash);
    })();
  }

  getBlock(blockNumberOrHash) {
    var _this4 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return yield _this4.web3.eth.getBlock(blockNumberOrHash);
    })();
  }

  /**
   * getDeployedCode - get the deployed code for an address from the client
   * NOTE: the block argument is optional
   * @param  {String} address
   * @return {String}         deployedBinary
   */
  getDeployedCode(address, block) {
    var _this5 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      debug("getting deployed code for %s", address);
      let code = yield _this5.web3.eth.getCode(address, block);
      return code === "0x0" ? "0x" : code;
    })();
  }
}
exports.default = Web3Adapter;

/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = require("lodash.sum");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = __webpack_require__(16);

var _keys2 = _interopRequireDefault(_keys);

exports.saga = saga;
exports.processTransaction = processTransaction;
exports.unload = unload;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(5);

var _helpers = __webpack_require__(1);

var _sagas = __webpack_require__(60);

var ast = _interopRequireWildcard(_sagas);

var _sagas2 = __webpack_require__(33);

var controller = _interopRequireWildcard(_sagas2);

var _sagas3 = __webpack_require__(34);

var solidity = _interopRequireWildcard(_sagas3);

var _sagas4 = __webpack_require__(23);

var evm = _interopRequireWildcard(_sagas4);

var _sagas5 = __webpack_require__(13);

var trace = _interopRequireWildcard(_sagas5);

var _sagas6 = __webpack_require__(17);

var data = _interopRequireWildcard(_sagas6);

var _sagas7 = __webpack_require__(30);

var web3 = _interopRequireWildcard(_sagas7);

var _actions = __webpack_require__(14);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:session:sagas");

const LOAD_SAGAS = {
  [actions.LOAD_TRANSACTION]: load
  //will also add reconstruct action/saga once it exists
};

function* listenerSaga() {
  while (true) {
    let action = yield (0, _effects.take)((0, _keys2.default)(LOAD_SAGAS));
    let saga = LOAD_SAGAS[action.type];

    yield (0, _effects.put)(actions.wait());
    yield (0, _effects.race)({
      exec: (0, _effects.call)(saga, action), //not all will use this
      interrupt: (0, _effects.take)(actions.INTERRUPT)
    });
    yield (0, _effects.put)(actions.ready());
  }
}

function* saga() {
  debug("starting listeners");
  yield* forkListeners();

  // receiving & saving contracts into state
  debug("waiting for contract information");
  let { contexts, sources } = yield (0, _effects.take)(actions.RECORD_CONTRACTS);

  debug("recording contract binaries");
  yield* recordContexts(...contexts);

  debug("recording contract sources");
  yield* recordSources(...sources);

  debug("normalizing contexts");
  yield* evm.normalizeContexts();

  debug("waiting for start");
  // wait for start signal
  let { txHash, provider } = yield (0, _effects.take)(actions.START);
  debug("starting");

  debug("visiting ASTs");
  // visit asts
  yield* ast.visitAll();

  //save allocation table
  debug("saving allocation table");
  yield* data.recordAllocations();

  //initialize web3 adapter
  yield* web3.init(provider);

  //process transaction (if there is one)
  //(note: this part may also set the error state)
  if (txHash !== undefined) {
    yield* processTransaction(txHash);
  }

  debug("readying");
  // signal that commands can begin
  yield* ready();
}

function* processTransaction(txHash) {
  // process transaction
  debug("fetching transaction info");
  let err = yield* fetchTx(txHash);
  if (err) {
    debug("error %o", err);
    yield* error(err);
  }
}

exports.default = (0, _helpers.prefixName)("session", saga);


function* forkListeners() {
  yield (0, _effects.fork)(listenerSaga); //session listener; this one is separate, sorry
  //(I didn't want to mess w/ the existing structure of defaults)
  return yield (0, _effects.all)([controller, data, evm, solidity, trace, web3].map(app => (0, _effects.fork)(app.saga)
  //ast no longer has a listener
  ));
}

function* fetchTx(txHash) {
  let result = yield* web3.inspectTransaction(txHash);
  debug("result %o", result);

  if (result.error) {
    return result.error;
  }

  //get addresses created/called during transaction
  debug("processing trace for addresses");
  let addresses = yield* trace.processTrace(result.trace);
  //add in the address of the call itself (if a call)
  if (result.address && !addresses.includes(result.address)) {
    addresses.push(result.address);
  }
  //if a create, only add in address if it was successful
  if (result.binary && result.status && !addresses.includes(result.storageAddress)) {
    addresses.push(result.storageAddress);
  }

  let blockNumber = result.block.number.toString(); //a BN is not accepted
  debug("obtaining binaries");
  let binaries = yield* web3.obtainBinaries(addresses, blockNumber);

  debug("recording instances");
  yield (0, _effects.all)(addresses.map((address, i) => (0, _effects.call)(recordInstance, address, binaries[i])));

  debug("sending initial call");
  yield* evm.begin(result);
}

function* recordContexts(...contexts) {
  for (let context of contexts) {
    yield* evm.addContext(context);
  }
}

function* recordSources(...sources) {
  for (let sourceData of sources) {
    if (sourceData !== undefined && sourceData !== null) {
      yield* solidity.addSource(sourceData.source, sourceData.sourcePath, sourceData.ast, sourceData.compiler);
    }
  }
}

function* recordInstance(address, binary) {
  yield* evm.addInstance(address, binary);
}

function* ready() {
  yield (0, _effects.put)(actions.ready());
}

function* error(err) {
  yield (0, _effects.put)(actions.error(err));
}

function* unload() {
  debug("unloading");
  yield* data.reset();
  yield* solidity.reset();
  yield* evm.unload();
  yield* trace.unload();
  yield (0, _effects.put)(actions.unloadTransaction());
}

//note that load takes an action as its argument, which is why it's separate
//from processTransaction
function* load({ txHash }) {
  yield* processTransaction(txHash);
}

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(6);

var _entries2 = _interopRequireDefault(_entries);

exports.visitAll = visitAll;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(5);

var _sagas = __webpack_require__(17);

var data = _interopRequireWildcard(_sagas);

var _selectors = __webpack_require__(36);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:ast:sagas");

function* walk(sourceId, node, pointer = "", parentId = null) {
  debug("walking %o %o", pointer, node);

  yield* handleEnter(sourceId, node, pointer, parentId);

  if (node instanceof Array) {
    for (let [i, child] of node.entries()) {
      yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${i}`, parentId);
    }
  } else if (node instanceof Object) {
    for (let [key, child] of (0, _entries2.default)(node)) {
      yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${key}`, node.id);
    }
  }

  yield* handleExit(sourceId, node, pointer);
}

function* handleEnter(sourceId, node, pointer, parentId) {
  if (!(node instanceof Object)) {
    return;
  }

  debug("entering %s", pointer);

  if (node.id !== undefined) {
    debug("%s recording scope %s", pointer, node.id);
    yield* data.scope(node.id, pointer, parentId, sourceId);
  }

  switch (node.nodeType) {
    case "VariableDeclaration":
      debug("%s recording variable %o", pointer, node);
      yield* data.declare(node);
      break;
    case "ContractDefinition":
    case "StructDefinition":
    case "EnumDefinition":
      yield* data.defineType(node);
      break;
  }
}

function* handleExit(sourceId, node, pointer) {
  debug("exiting %s", pointer);

  // no-op right now
}

function* visitAll() {
  let sources = yield (0, _effects.select)(_selectors2.default.views.sources);

  yield (0, _effects.all)((0, _entries2.default)(sources).filter(([_, source]) => source.ast).map(([id, { ast }]) => (0, _effects.call)(walk, id, ast)));

  debug("done visiting");
}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _redux = __webpack_require__(7);

var _reducers = __webpack_require__(62);

var _reducers2 = _interopRequireDefault(_reducers);

var _reducers3 = __webpack_require__(63);

var _reducers4 = _interopRequireDefault(_reducers3);

var _reducers5 = __webpack_require__(64);

var _reducers6 = _interopRequireDefault(_reducers5);

var _reducers7 = __webpack_require__(65);

var _reducers8 = _interopRequireDefault(_reducers7);

var _reducers9 = __webpack_require__(66);

var _reducers10 = _interopRequireDefault(_reducers9);

var _actions = __webpack_require__(14);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:session:reducers");

function ready(state = false, action) {
  switch (action.type) {
    case actions.READY:
      debug("readying");
      return true;

    case actions.WAIT:
      return false;

    default:
      return state;
  }
}

function projectInfoComputed(state = false, action) {
  switch (action.type) {
    case actions.PROJECT_INFO_COMPUTED:
      return true;
    default:
      return state;
  }
}

function lastLoadingError(state = null, action) {
  switch (action.type) {
    case actions.ERROR:
      debug("error: %o", action.error);
      return action.error;

    case actions.WAIT:
      return null;

    default:
      return state;
  }
}

function transaction(state = {}, action) {
  switch (action.type) {
    case actions.SAVE_TRANSACTION:
      return action.transaction;
    case actions.UNLOAD_TRANSACTION:
      return {};
    default:
      return state;
  }
}

function receipt(state = {}, action) {
  switch (action.type) {
    case actions.SAVE_RECEIPT:
      return action.receipt;
    case actions.UNLOAD_TRANSACTION:
      return {};
    default:
      return state;
  }
}

function block(state = {}, action) {
  switch (action.type) {
    case actions.SAVE_BLOCK:
      return action.block;
    case actions.UNLOAD_TRANSACTION:
      return {};
    default:
      return state;
  }
}

const session = (0, _redux.combineReducers)({
  ready,
  lastLoadingError,
  projectInfoComputed,
  transaction,
  receipt,
  block
});

const reduceState = (0, _redux.combineReducers)({
  session,
  data: _reducers2.default,
  evm: _reducers4.default,
  solidity: _reducers6.default,
  trace: _reducers8.default,
  controller: _reducers10.default
});

exports.default = reduceState;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = __webpack_require__(28);

var _set2 = _interopRequireDefault(_set);

var _values = __webpack_require__(19);

var _values2 = _interopRequireDefault(_values);

var _assign = __webpack_require__(8);

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = __webpack_require__(2);

var _extends3 = _interopRequireDefault(_extends2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _redux = __webpack_require__(7);

var _actions = __webpack_require__(27);

var actions = _interopRequireWildcard(_actions);

var _truffleDecoder = __webpack_require__(32);

var _helpers = __webpack_require__(1);

var _truffleDecodeUtils = __webpack_require__(4);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:data:reducers");

const DEFAULT_SCOPES = {
  byId: {}
};

function scopes(state = DEFAULT_SCOPES, action) {
  var scope;
  var variables;

  switch (action.type) {
    case actions.SCOPE:
      scope = state.byId[action.id] || {};

      return {
        byId: (0, _extends3.default)({}, state.byId, {

          [action.id]: (0, _extends3.default)({}, scope, {

            id: action.id,
            sourceId: action.sourceId,
            parentId: action.parentId,
            pointer: action.pointer
          })
        })
      };

    case actions.DECLARE:
      scope = state.byId[action.node.scope] || {};
      variables = scope.variables || [];

      return {
        byId: (0, _extends3.default)({}, state.byId, {

          [action.node.scope]: (0, _extends3.default)({}, scope, {

            variables: [...variables, { name: action.node.name, id: action.node.id }]
          })
        })
      };

    default:
      return state;
  }
}

//a note on the following reducer: solidity assigns a unique AST ID to every
//AST node among all the files being compiled together.  thus, it is, for now,
//safe to identify user-defined types solely by their AST ID.  In the future,
//once we eventually support having some files compiled separately from others,
//this will become a bug you'll have to fix, and you'll have to fix it in the
//decoder, too.  Sorry, future me! (or whoever's stuck doing this)

function userDefinedTypes(state = [], action) {
  switch (action.type) {
    case actions.DEFINE_TYPE:
      return [...state, action.node.id];
    default:
      return state;
  }
}

const DEFAULT_ALLOCATIONS = {
  storage: {},
  memory: {},
  calldata: {}
};

function allocations(state = DEFAULT_ALLOCATIONS, action) {
  if (action.type === actions.ALLOCATE) {
    return {
      storage: action.storage,
      memory: action.memory,
      calldata: action.calldata
    };
  } else {
    return state;
  }
}

const info = (0, _redux.combineReducers)({
  scopes,
  userDefinedTypes,
  allocations
});

const GLOBAL_ASSIGNMENTS = [[{ builtin: "msg" }, { special: "msg" }], [{ builtin: "tx" }, { special: "tx" }], [{ builtin: "block" }, { special: "block" }], [{ builtin: "this" }, { special: "this" }], [{ builtin: "now" }, { special: "timestamp" }] //we don't have an alias "now"
].map(([idObj, ref]) => (0, _helpers.makeAssignment)(idObj, ref));

const DEFAULT_ASSIGNMENTS = {
  byId: (0, _assign2.default)({}, //we start out with all globals assigned
  ...GLOBAL_ASSIGNMENTS.map(assignment => ({ [assignment.id]: assignment }))),
  byAstId: {}, //no regular variables assigned at start
  byBuiltin: (0, _assign2.default)({}, //again, all globals start assigned
  ...GLOBAL_ASSIGNMENTS.map(assignment => ({
    [assignment.builtin]: [assignment.id] //yes, that's a 1-element array
  })))
};

function assignments(state = DEFAULT_ASSIGNMENTS, action) {
  switch (action.type) {
    case actions.ASSIGN:
    case actions.MAP_PATH_AND_ASSIGN:
      debug("action.type %O", action.type);
      debug("action.assignments %O", action.assignments);
      return (0, _values2.default)(action.assignments).reduce((acc, assignment) => {
        let { id, astId } = assignment;
        //we assume for now that only ordinary variables will be assigned this
        //way, and not globals; globals are handled in DEFAULT_ASSIGNMENTS
        return (0, _extends3.default)({}, acc, {
          byId: (0, _extends3.default)({}, acc.byId, {
            [id]: assignment
          }),
          byAstId: (0, _extends3.default)({}, acc.byAstId, {
            [astId]: [...new _set2.default([...(acc.byAstId[astId] || []), id])]
            //we use a set for uniqueness
          })
        });
      }, state);

    case actions.RESET:
      return DEFAULT_ASSIGNMENTS;

    default:
      return state;
  }
}

const DEFAULT_PATHS = {
  byAddress: {}
};

//WARNING: do *not* rely on mappedPaths to keep track of paths that do not
//involve mapping keys!  Yes, many will get mapped, but there is no guarantee.
//Only when mapping keys are involved does it necessarily work reliably --
//which is fine, as that's all we need it for.
function mappedPaths(state = DEFAULT_PATHS, action) {
  switch (action.type) {
    case actions.MAP_PATH_AND_ASSIGN:
      let { address, slot, typeIdentifier, parentType } = action;
      //how this case works: first, we find the spot in our table (based on
      //address, type identifier, and slot address) where the new entry should
      //be added; if needed we set up all the objects needed along the way.  If
      //there's already something there, we do nothing.  If there's nothing
      //there, we record our given slot in that spot in that table -- however,
      //we alter it in one key way.  Before entry, we check if the slot's
      //*parent* has a spot in the table, based on address (same for both child
      //and parent), parentType, and the parent's slot address (which can be
      //found as the slotAddress of the slot's path object, if it exists -- if
      //it doesn't then we conclude that no the parent does not have a spot in
      //the table).  If the parent has a slot in the table already, then we
      //alter the child slot by replacing its path with the parent slot.  This
      //will keep the slotAddress the same, but since the versions kept in the
      //table here are supposed to preserve path information, we'll be
      //replacing a fairly bare-bones Slot object with one with a full path.

      //we do NOT want to distinguish between types with and without "_ptr" on
      //the end here!
      debug("typeIdentifier %s", typeIdentifier);
      typeIdentifier = _truffleDecodeUtils.Definition.restorePtr(typeIdentifier);
      parentType = _truffleDecodeUtils.Definition.restorePtr(parentType);

      debug("slot %o", slot);
      let hexSlotAddress = _truffleDecodeUtils.Conversion.toHexString((0, _truffleDecoder.slotAddress)(slot), _truffleDecodeUtils.EVM.WORD_SIZE);
      let parentAddress = slot.path ? _truffleDecodeUtils.Conversion.toHexString((0, _truffleDecoder.slotAddress)(slot.path), _truffleDecodeUtils.EVM.WORD_SIZE) : undefined;

      //this is going to be messy and procedural, sorry.  but let's start with
      //the easy stuff: create the new address if needed, clone if not
      let newState = (0, _extends3.default)({}, state, {
        byAddress: (0, _extends3.default)({}, state.byAddress, {
          [address]: {
            byType: (0, _extends3.default)({}, (state.byAddress[address] || { byType: {} }).byType)
          }
        })
      });

      //now, let's add in the new type, if needed
      newState.byAddress[address].byType = (0, _extends3.default)({}, newState.byAddress[address].byType, {
        [typeIdentifier]: {
          bySlotAddress: (0, _extends3.default)({}, (newState.byAddress[address].byType[typeIdentifier] || {
            bySlotAddress: {}
          }).bySlotAddress)
        }
      });

      let oldSlot = newState.byAddress[address].byType[typeIdentifier].bySlotAddress[hexSlotAddress];
      //yes, this looks strange, but we haven't changed it yet except to
      //clone or create empty (and we don't want undefined!)
      //now: is there something already there or no?  if no, we must add
      if (oldSlot === undefined) {
        let newSlot;
        debug("parentAddress %o", parentAddress);
        if (parentAddress !== undefined && newState.byAddress[address].byType[parentType] && newState.byAddress[address].byType[parentType].bySlotAddress[parentAddress]) {
          //if the parent is already present, use that instead of the given
          //parent!
          newSlot = (0, _extends3.default)({}, slot, {
            path: newState.byAddress[address].byType[parentType].bySlotAddress[parentAddress]
          });
        } else {
          newSlot = slot;
        }
        newState.byAddress[address].byType[typeIdentifier].bySlotAddress[hexSlotAddress] = newSlot;
      }
      //if there's already something there, we don't need to do anything

      return newState;

    case actions.RESET:
      return DEFAULT_PATHS;

    default:
      return state;
  }
}

const proc = (0, _redux.combineReducers)({
  assignments,
  mappedPaths
});

const reducer = (0, _redux.combineReducers)({
  info,
  proc
});

exports.default = reducer;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(2);

var _extends3 = _interopRequireDefault(_extends2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _redux = __webpack_require__(7);

var _actions = __webpack_require__(29);

var actions = _interopRequireWildcard(_actions);

var _helpers = __webpack_require__(1);

var _truffleDecodeUtils = __webpack_require__(4);

var DecodeUtils = _interopRequireWildcard(_truffleDecodeUtils);

var _bn = __webpack_require__(15);

var _bn2 = _interopRequireDefault(_bn);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:evm:reducers");

const DEFAULT_CONTEXTS = {
  byContext: {}
};

function contexts(state = DEFAULT_CONTEXTS, action) {
  switch (action.type) {
    /*
     * Adding a new context
     */
    case actions.ADD_CONTEXT:
      const {
        contractName,
        binary,
        sourceMap,
        compiler,
        abi,
        contractId,
        contractKind,
        isConstructor
      } = action;
      debug("action %O", action);
      //NOTE: we take hash as *string*, not as bytes, because the binary may
      //contain link references!
      const context = (0, _helpers.keccak256)({ type: "string", value: binary });
      let primarySource;
      if (sourceMap !== undefined) {
        primarySource = (0, _helpers.extractPrimarySource)(sourceMap);
      }
      //otherwise leave it undefined

      return (0, _extends3.default)({}, state, {
        byContext: (0, _extends3.default)({}, state.byContext, {
          [context]: {
            contractName,
            context,
            binary,
            sourceMap,
            primarySource,
            compiler,
            abi,
            contractId,
            contractKind,
            isConstructor
          }
        })
      });

    case actions.NORMALIZE_CONTEXTS:
      return {
        byContext: DecodeUtils.Contexts.normalizeContexts(state.byContext)
      };

    /*
     * Default case
     */
    default:
      return state;
  }
}

const info = (0, _redux.combineReducers)({
  contexts
});

const DEFAULT_TX = {
  gasprice: new _bn2.default(0),
  origin: DecodeUtils.EVM.ZERO_ADDRESS
};

function tx(state = DEFAULT_TX, action) {
  switch (action.type) {
    case actions.SAVE_GLOBALS:
      let { gasprice, origin } = action;
      return { gasprice, origin };
    case actions.UNLOAD_TRANSACTION:
      return DEFAULT_TX;
    default:
      return state;
  }
}

const DEFAULT_BLOCK = {
  coinbase: DecodeUtils.EVM.ZERO_ADDRESS,
  difficulty: new _bn2.default(0),
  gaslimit: new _bn2.default(0),
  number: new _bn2.default(0),
  timestamp: new _bn2.default(0)
};

function block(state = DEFAULT_BLOCK, action) {
  switch (action.type) {
    case actions.SAVE_GLOBALS:
      return action.block;
    case actions.UNLOAD_TRANSACTION:
      return DEFAULT_BLOCK;
    default:
      return state;
  }
}

const globals = (0, _redux.combineReducers)({
  tx,
  block
});

function status(state = null, action) {
  switch (action.type) {
    case actions.SAVE_STATUS:
      return action.status;
    case actions.UNLOAD_TRANSACTION:
      return null;
    default:
      return state;
  }
}

function initialCall(state = null, action) {
  switch (action.type) {
    case actions.CALL:
    case actions.CREATE:
      //we only want to save the initial call, so return
      //the current state if it's not null
      if (state !== null) {
        return state;
      } else {
        //we'll just store the action itself in the state
        return action;
      }
    case actions.UNLOAD_TRANSACTION:
      return null;
    default:
      return state;
  }
}

const transaction = (0, _redux.combineReducers)({
  globals,
  status,
  initialCall
});

function callstack(state = [], action) {
  switch (action.type) {
    case actions.CALL:
      {
        const { address, data, storageAddress, sender, value } = action;
        return state.concat([{ address, data, storageAddress, sender, value }]);
      }

    case actions.CREATE:
      {
        const { binary, storageAddress, sender, value } = action;
        return state.concat([{ binary, data: "0x", storageAddress, sender, value }]
        //the empty data field is to make msg.data and msg.sig come out right
        );
      }

    case actions.RETURN_CALL:
    case actions.RETURN_CREATE:
    case actions.FAIL:
      //pop the stack... unless (HACK) that would leave it empty (this will
      //only happen at the end when we want to keep the last one around)
      return state.length > 1 ? state.slice(0, -1) : state;

    case actions.RESET:
    case actions.UNLOAD_TRANSACTION:
      return [];

    default:
      return state;
  }
}

const DEFAULT_CODEX = [{
  accounts: {}
  //will be more here in the future!
}];

function codex(state = DEFAULT_CODEX, action) {
  let newState, topCodex;

  const updateFrameStorage = (frame, address, slot, value) => (0, _extends3.default)({}, frame, {
    accounts: (0, _extends3.default)({}, frame.accounts, {
      [address]: (0, _extends3.default)({}, frame.accounts[address], {
        storage: (0, _extends3.default)({}, frame.accounts[address].storage, {
          [slot]: value
        })
      })
    })
  });

  const updateFrameCode = (frame, address, code, context) => {
    let existingPage = frame.accounts[address] || { storage: {} };
    return (0, _extends3.default)({}, frame, {
      accounts: (0, _extends3.default)({}, frame.accounts, {
        [address]: (0, _extends3.default)({}, existingPage, {
          code: code,
          context: context
        })
      })
    });
  };

  //later: will add "force" parameter
  const safePop = array => array.length > 2 ? array.slice(0, -1) : array;

  //later: will add "force" parameter
  const safeSave = array => array.length > 2 ? array.slice(0, -2).concat([array[array.length - 1]]) : array;

  switch (action.type) {
    case actions.CALL:
      debug("call action");
      debug("codex: %O", state);
      //on a call, we can just make a new stackframe by cloning the top
      //stackframe; there should already be an account for the address we're
      //calling into, so we don't need to make one
      return [...state, state[state.length - 1]];

    case actions.CREATE:
      //on a create, make a new stackframe, then add a new pages to the
      //codex if necessary; don't add a zero page though (or pages that already
      //exist)

      //first, add a new stackframe by cloning the top one
      newState = [...state, state[state.length - 1]];
      topCodex = newState[newState.length - 1];
      //now, do we need to add a new address to this stackframe?
      if (topCodex.accounts[action.storageAddress] !== undefined || action.storageAddress === DecodeUtils.EVM.ZERO_ADDRESS) {
        //if we don't
        return newState;
      }
      //if we do
      newState[newState.length - 1] = (0, _extends3.default)({}, topCodex, {
        accounts: (0, _extends3.default)({}, topCodex.accounts, {
          [action.storageAddress]: {
            storage: {},
            code: "0x",
            context: null
            //there will be more here in the future!
          }
        })
      });
      return newState;

    case actions.STORE:
      {
        //on a store, the relevant page should already exist, so we can just
        //add or update the needed slot
        const { address, slot, value } = action;
        if (address === DecodeUtils.EVM.ZERO_ADDRESS) {
          //as always, we do not maintain a zero page
          return state;
        }
        newState = state.slice(); //clone the state
        topCodex = newState[newState.length - 1];
        newState[newState.length - 1] = updateFrameStorage(topCodex, address, slot, value);
        return newState;
      }

    case actions.LOAD:
      {
        //loads are a little more complicated -- usually we do nothing, but if
        //it's an external load (there was nothing already there), then we want
        //to update *every* stackframe
        const { address, slot, value } = action;
        if (address === DecodeUtils.EVM.ZERO_ADDRESS) {
          //as always, we do not maintain a zero page
          return state;
        }
        topCodex = state[state.length - 1];
        if (topCodex.accounts[address].storage[slot] !== undefined) {
          //if we already have a value in the *top* stackframe, update *no*
          //stackframes; don't update the top (no need, it's just a load, not a
          //store), don't update the rest (that would be wrong, you might be
          //loading a value that will get reverted later)
          return state;
        } else {
          //if we *don't* already have a value in the top stackframe, that means
          //we're loading a value from a previous transaction!  That's not a
          //value that will get reverted if this call fails, so update *every*
          //stackframe
          return state.map(frame => updateFrameStorage(frame, address, slot, value));
        }
      }

    case actions.RETURN_CALL:
      //we want to pop the top while making the new top a copy of the old top;
      //that is to say, we want to drop just the element *second* from the top
      //NOTE: we don't ever go down to 1 element!
      return safeSave(state);

    case actions.RETURN_CREATE:
      {
        //we're going to do the same things in this case as in the usual return
        //case, but first we need to record the code that was returned
        const { address, code, context } = action;
        newState = state.slice(); //clone the state
        //NOTE: since this is only for RETURN_CREATE, and not FAIL, we shouldn't
        //have to worry about accidentally getting a zero address here
        newState[newState.length - 1] = updateFrameCode(newState[newState.length - 1], address, code, context);
        debug("newState: %O", newState);
        return safeSave(newState);
      }

    case actions.FAIL:
      //pop the stack
      //NOTE: we don't ever go down to 1 element!
      return safePop(state);

    case actions.RESET:
      return [state[0]]; //leave the -1 frame on the stack

    case actions.UNLOAD_TRANSACTION:
      return DEFAULT_CODEX;

    case actions.ADD_INSTANCE:
      {
        //add the instance to every frame
        //(this is a little HACKy, but it *should* be fine)
        debug("adding instance");
        const { address, binary, context } = action;
        return state.map(frame => updateFrameCode(frame, address, binary, context));
      }

    default:
      return state;
  }
}

const proc = (0, _redux.combineReducers)({
  callstack,
  codex
});

const reducer = (0, _redux.combineReducers)({
  info,
  transaction,
  proc
});

exports.default = reducer;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(2);

var _extends3 = _interopRequireDefault(_extends2);

var _keys = __webpack_require__(16);

var _keys2 = _interopRequireDefault(_keys);

var _redux = __webpack_require__(7);

var _actions = __webpack_require__(35);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_SOURCES = {
  byId: {}
};

function sources(state = DEFAULT_SOURCES, action) {
  switch (action.type) {
    /*
     * Adding a new source
     */
    case actions.ADD_SOURCE:
      let { ast, source, sourcePath, compiler } = action;

      let id = (0, _keys2.default)(state.byId).length;

      return {
        byId: (0, _extends3.default)({}, state.byId, {

          [id]: {
            id,
            ast,
            source,
            sourcePath,
            compiler
          }
        })
      };

    /*
     * Default case
     */
    default:
      return state;
  }
}

const info = (0, _redux.combineReducers)({
  sources
});

function functionDepthStack(state = [0], action) {
  switch (action.type) {
    case actions.JUMP:
      let newState = state.slice(); //clone the state
      const delta = spelunk(action.jumpDirection);
      let top = newState[newState.length - 1];
      newState[newState.length - 1] = top + delta;
      return newState;

    case actions.RESET:
      return [0];

    case actions.EXTERNAL_CALL:
      return [...state, state[state.length - 1] + 1];

    case actions.EXTERNAL_RETURN:
      //just pop the stack! unless, HACK, that would leave it empty
      return state.length > 1 ? state.slice(0, -1) : state;

    default:
      return state;
  }
}

function spelunk(jump) {
  if (jump === "i") {
    return 1;
  } else if (jump === "o") {
    return -1;
  } else {
    return 0;
  }
}

const proc = (0, _redux.combineReducers)({
  functionDepthStack
});

const reducer = (0, _redux.combineReducers)({
  info,
  proc
});

exports.default = reducer;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _redux = __webpack_require__(7);

var _actions = __webpack_require__(12);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:trace:reducers");

function index(state = 0, action) {
  switch (action.type) {
    case actions.TOCK:
      return state + 1;

    case actions.RESET:
    case actions.UNLOAD_TRANSACTION:
      return 0;

    default:
      return state;
  }
}

function finished(state = false, action) {
  switch (action.type) {
    case actions.END_OF_TRACE:
      return true;

    case actions.RESET:
    case actions.UNLOAD_TRANSACTION:
      return false;

    default:
      return state;
  }
}

function steps(state = null, action) {
  switch (action.type) {
    case actions.SAVE_STEPS:
      return action.steps;
    case actions.UNLOAD_TRANSACTION:
      debug("unloading");
      return null;
    default:
      return state;
  }
}

const transaction = (0, _redux.combineReducers)({
  steps
});

const proc = (0, _redux.combineReducers)({
  index,
  finished
});

const reducer = (0, _redux.combineReducers)({
  transaction,
  proc
});

exports.default = reducer;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _redux = __webpack_require__(7);

var _actions = __webpack_require__(20);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("debugger:controller:reducers");

function breakpoints(state = [], action) {
  switch (action.type) {
    case actions.ADD_BREAKPOINT:
      //check for any existing identical breakpoints to avoid redundancy
      if (state.filter(breakpoint => breakpoint.sourceId === action.breakpoint.sourceId && breakpoint.line === action.breakpoint.line && breakpoint.node === action.breakpoint.node //may be undefined
      ).length > 0) {
        //if it's already there, do nothing
        return state;
      } else {
        //otherwise add it
        return state.concat([action.breakpoint]);
      }
      break;

    case actions.REMOVE_BREAKPOINT:
      return state.filter(breakpoint => breakpoint.sourceId !== action.breakpoint.sourceId || breakpoint.line !== action.breakpoint.line || breakpoint.node !== action.breakpoint.node //may be undefined
      );
      break;

    case actions.REMOVE_ALL_BREAKPOINTS:
      return [];

    default:
      return state;
  }
}

function isStepping(state = false, action) {
  switch (action.type) {
    case actions.START_STEPPING:
      debug("got step start action");
      return true;
    case actions.DONE_STEPPING:
      debug("got step stop action");
      return false;
    default:
      return state;
  }
}

const reducer = (0, _redux.combineReducers)({
  breakpoints,
  isStepping
});

exports.default = reducer;

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,